/*
 * File: app/view/LLSForm.js
 *
 * This file was generated by Sencha Architect version 2.2.3.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.LLSForm', {
	extend: 'Ext.form.Panel',

	border: false,
	layout: {
		align: 'stretch',
		type: 'vbox'
	},
	bodyPadding: 10,
	header: false,
	title: 'My Form',
	jsonSubmit: true,
	trackResetOnLoad: true,

	initComponent: function() {
		var me = this;

		me.initialConfig = Ext.apply({
			jsonSubmit: true,
			trackResetOnLoad: true
		}, me.initialConfig);

		Ext.applyIf(me, {
			items: [
				{
					xtype: 'container',
					items: [
						{
							xtype: 'checkboxfield',
							itemId: '',
							name: 'ignition_power',
							boxLabel: 'Питание от зажигания'
						}
					]
				},
				{
					xtype: 'gridpanel',
					flex: 1,
					header: false,
					title: 'My Grid Panel',
					columnLines: false,
					enableColumnHide: false,
					enableColumnMove: false,
					forceFit: true,
					sortableColumns: false,
					store: 'LLSStore',
					columns: [
						{
							xtype: 'rownumberer'
						},
						{
							xtype: 'numbercolumn',
							draggable: false,
							dataIndex: 'sensor_value',
							text: 'Показания датчика',
							format: '0000.00',
							editor: {
								xtype: 'numberfield',
								selectOnFocus: true,
								allowExponential: false,
								minValue: 0
							}
						},
						{
							xtype: 'numbercolumn',
							dataIndex: 'fuel_value',
							text: 'Уровень топлива',
							format: '0000.00',
							editor: {
								xtype: 'numberfield',
								selectOnFocus: true,
								allowExponential: false,
								minValue: 0
							}
						}
					],
					plugins: [
						Ext.create('Ext.grid.plugin.CellEditing', {
							clicksToEdit: 1,
							listeners: {
								edit: {
									fn: me.onCellEditingEdit,
									scope: me
								}
							}
						})
					],
					dockedItems: [
						{
							xtype: 'toolbar',
							dock: 'bottom',
							items: [
								{
									xtype: 'button',
									text: 'Добавить строку',
									listeners: {
										click: {
											fn: me.onButtonClick6,
											scope: me
										}
									}
								},
								{
									xtype: 'button',
									text: 'Удалить строку',
									listeners: {
										click: {
											fn: me.onButtonClick7,
											scope: me
										}
									}
								},
								{
									xtype: 'button',
									text: 'Показать график',
									listeners: {
										click: {
											fn: me.onButtonClick,
											scope: me
										}
									}
								}
							]
						}
					]
				}
			],
			dockedItems: [
				{
					xtype: 'container',
					flex: 1,
					dock: 'bottom',
					layout: {
						align: 'middle',
						pack: 'center',
						type: 'hbox'
					},
					items: [
						{
							xtype: 'button',
							minWidth: 100,
							text: 'Отмена',
							listeners: {
								click: {
									fn: me.onButtonClick4,
									scope: me
								}
							}
						},
						{
							xtype: 'button',
							margin: 10,
							minWidth: 100,
							text: 'Сохранить',
							listeners: {
								click: {
									fn: me.onButtonClick5,
									scope: me
								}
							}
						}
					]
				}
			]
		});

		me.callParent(arguments);
	},

	onCellEditingEdit: function(editor, e, eOpts) {
		e.record.commit();

		var grid = e.grid;
		var store = grid.getStore();
		store.sort('sensor_value', 'ASC');
		grid.getView().refresh();
	},

	onButtonClick6: function(button, e, eOpts) {
		var grid = button.up('gridpanel');
		var store = grid.getStore();
		store.add({sensor_value: 0, fuel_value: 0});
		store.sort('sensor_value', 'ASC');
	},

	onButtonClick7: function(button, e, eOpts) {
		var grid = button.up('gridpanel');
		var store = grid.getStore();
		var selectionModel = grid.getSelectionModel();

		if (selectionModel.getCount() > 0) {
			store.remove(selectionModel.getSelection());
			grid.getView().refresh();
		}
	},

	onButtonClick: function(button, e, eOpts) {
		Ext.create("MyApp.view.ChartWindow").show();
	},

	onButtonClick4: function(button, e, eOpts) {
		var window = button.up('window');
		window.close();
	},

	onButtonClick5: function(button, e, eOpts) {
		var form = button.up('form');
		var window = button.up('window');
		var grid = form.down('gridpanel');
		var store = grid.getStore();

		if (!form.isDirty())
		{
			window.down('tabpanel').setTabs(true);
			return;
		}

		var mask = Ext.getBody().mask('Сохранение данных', 'Сохранение');
		mask.setStyle('z-index', Ext.WindowMgr.zseed + 1000);

		form.submit({
			clientValidation: true,
			headers : { Authorization : MyApp.AuthString },

			params: {table : Ext.pluck(store.data.items, 'data')},

			success: function(form, action) {

				Ext.getBody().unmask();

				window.device = action.result.object;
				window.down('tabpanel').setTabs(true);
			},

			failure: function(form, action) {

				Ext.getBody().unmask();

				switch (action.failureType) {

					case Ext.form.action.Action.CLIENT_INVALID:
					Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
					break;

					case Ext.form.action.Action.CONNECT_FAILURE:
					Ext.Msg.alert('Failure', 'Ajax communication failed');
					break;

					case Ext.form.action.Action.SERVER_INVALID:
					Ext.Msg.alert('Failure', action.result.message);
					break;
				}
			}
		});

	}

});