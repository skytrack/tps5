/*
 * File: app/view/TerminalWindow.js
 *
 * This file was generated by Sencha Architect version 2.2.3.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.TerminalWindow', {
	extend: 'Ext.window.Window',

	height: 480,
	width: 765,
	layout: {
		type: 'card'
	},
	title: 'Настройка оборудования',
	modal: true,

	initComponent: function() {
		var me = this;

		Ext.applyIf(me, {
			items: [
				{
					xtype: 'tabpanel',
					setTabs: function(next) {
						var tab				= this.getActiveTab();
						var window			= this.up('window');

						var common			= this.down('#common');
						var hardware		= this.down('#hardware');
						var sens			= this.down('#sensors');
						var lls_left		= this.down('#lls_left');
						var lls_right		= this.down('#lls_right');
						var fuel			= this.down('#fuel');
						var retranslator	= this.down('#retranslator');

						var b_hardware		= false;
						var b_sensors		= false;
						var b_lls_left		= false;
						var b_lls_right 	= false;

						var device = window.device;

						if (device) {

							var caps = device.caps;
							var sensors = device.sensors;

							if (caps) {

								b_hardware = caps.hwsettings;

								for (var i = 1; i <= 8; i++) {
									if ((caps['discrete' + i])||(caps['counter' + i])||(caps['analog' + i])||(caps['frequency' + i])||(caps.injector)||(caps.rs485)) {
										b_sensors = true;
										break;
									}
								}	

								if (sensors) {

									if (
									((caps.frequency1)&&(sensors.frequency1_type == 2))||
									((caps.frequency2)&&(sensors.frequency2_type == 2))||
									((caps.frequency3)&&(sensors.frequency3_type == 2))||
									((caps.frequency4)&&(sensors.frequency4_type == 2))||
									((caps.frequency5)&&(sensors.frequency5_type == 2))||
									((caps.frequency6)&&(sensors.frequency6_type == 2))||
									((caps.frequency7)&&(sensors.frequency7_type == 2))||
									((caps.frequency8)&&(sensors.frequency8_type == 2))||

									((caps.analog1)&&(sensors.analog1_type == 2))||
									((caps.analog2)&&(sensors.analog2_type == 2))||
									((caps.analog3)&&(sensors.analog3_type == 2))||
									((caps.analog4)&&(sensors.analog4_type == 2))||
									((caps.analog5)&&(sensors.analog5_type == 2))||
									((caps.analog6)&&(sensors.analog6_type == 2))||
									((caps.analog7)&&(sensors.analog7_type == 2))||
									((caps.analog8)&&(sensors.analog8_type == 2))||
									((caps.rs485)&&(sensors.rs485_lls_left))) {

										b_lls_left = true;
									};

									if (
									((caps.frequency1)&&(sensors.frequency1_type == 3))||
									((caps.frequency2)&&(sensors.frequency2_type == 3))||
									((caps.frequency3)&&(sensors.frequency3_type == 3))||
									((caps.frequency4)&&(sensors.frequency4_type == 3))||
									((caps.frequency5)&&(sensors.frequency5_type == 3))||
									((caps.frequency6)&&(sensors.frequency6_type == 3))||
									((caps.frequency7)&&(sensors.frequency7_type == 3))||
									((caps.frequency8)&&(sensors.frequency8_type == 3))||

									((caps.analog1)&&(sensors.analog1_type == 3))||
									((caps.analog2)&&(sensors.analog2_type == 3))||
									((caps.analog3)&&(sensors.analog3_type == 3))||
									((caps.analog4)&&(sensors.analog4_type == 3))||
									((caps.analog5)&&(sensors.analog5_type == 3))||
									((caps.analog6)&&(sensors.analog6_type == 3))||
									((caps.analog7)&&(sensors.analog7_type == 3))||
									((caps.analog8)&&(sensors.analog8_type == 3))||
									((caps.rs485)&&(sensors.rs485_lls_right))) {

										b_lls_right = true;
									};
								}
							}
						}

						hardware.tab.setVisible(b_hardware);
						sens.tab.setVisible(b_sensors);
						fuel.tab.setVisible(b_lls_left || b_lls_right);

						if (lls_left.tab) {
							if (b_lls_left)
							lls_left.tab.show();
							else
							lls_left.tab.hide();
						}

						if (lls_right.tab) {
							if (b_lls_right)
							lls_right.tab.show();
							else
							lls_right.tab.hide();
						}

						if (!next) {
							return;
						}

						if (tab == common) {

							if (b_hardware) {
								this.setActiveTab(hardware);
								return;
							}
							if (b_sensors) {
								this.setActiveTab(sens);	
								return;
							}
							if (b_lls_left) {
								this.setActiveTab(lls_left);		
								return;
							}
							if (b_lls_right) {
								this.setActiveTab(lls_right);
								return;
							}

							this.setActiveTab(retranslator);

							return;
						}

						if (tab == hardware) {

							if (b_sensors) {
								this.setActiveTab(sens);
								return;
							}
							if (b_lls_left) {
								this.setActiveTab(lls_left);		
								return;
							}
							if (b_lls_right) {
								this.setActiveTab(lls_right);
								return;
							}

							this.setActiveTab(retranslator);

							return;
						}

						if (tab == sens) {
							if (b_lls_left)
							this.setActiveTab(lls_left);		
							else
							if (b_lls_right)
							this.setActiveTab(lls_right);
							else
							this.setActiveTab(retranslator);

							return;
						}

						if (tab == lls_left) {
							if (b_lls_right)
							this.setActiveTab(lls_right);
							else
							this.setActiveTab(fuel);

							return;
						}

						if (tab == lls_right) {
							this.setActiveTab(fuel);
							return;
						}

						if (tab == fuel) {
							this.setActiveTab(retranslator);
							return;
						}

						console.log(retranslator);
						if (tab == retranslator) {
							window.close();
							return;
						}

					},
					activeTab: 0,
					items: [
						{
							xtype: 'panel',
							itemId: 'common',
							layout: {
								type: 'fit'
							},
							title: 'Общие настройки',
							items: [
								{
									xtype: 'form',
									border: false,
									layout: {
										align: 'stretch',
										type: 'vbox'
									},
									bodyPadding: 10,
									header: false,
									title: 'My Form',
									jsonSubmit: true,
									method: 'POST',
									trackResetOnLoad: true,
									url: '',
									items: [
										{
											xtype: 'fieldset',
											flex: 1,
											layout: {
												type: 'fit'
											},
											title: 'Марка/модель:',
											items: [
												{
													xtype: 'gridpanel',
													margin: '0, 0, 10 ,0',
													header: false,
													title: 'My Grid Panel',
													hideHeaders: true,
													store: 'Devices',
													columns: [
														{
															xtype: 'gridcolumn',
															dataIndex: 'name',
															text: 'String',
															flex: 1
														}
													],
													listeners: {
														select: {
															fn: me.onTypeSelect,
															scope: me
														}
													}
												}
											]
										},
										{
											xtype: 'fieldset',
											title: 'Обязательные параметры:',
											items: [
												{
													xtype: 'textfield',
													anchor: '100%',
													itemId: 'name',
													fieldLabel: 'Название',
													name: 'name',
													allowBlank: false,
													blankText: 'Необходимо указать это поле',
													emptyText: 'Введите название',
													maxLength: 256,
													maxLengthText: 'Максимальная длина поля: {0}',
													minLength: 1,
													minLengthText: 'Минимальная длина поля: {0}'
												},
												{
													xtype: 'textfield',
													anchor: '100%',
													itemId: 'dev_id',
													fieldLabel: 'Идентификатор',
													name: 'dev_id',
													allowBlank: false,
													blankText: 'Необходимо указать это поле',
													emptyText: 'Введите уникальный идентификатор устройства',
													maxLength: 15,
													maxLengthText: 'Максимальная длина поля: {0}',
													minLength: 1,
													minLengthText: 'Минимальная длина поля: {0}'
												},
												{
													xtype: 'textfield',
													anchor: '100%',
													itemId: 'phone',
													fieldLabel: 'Номер сим-карты',
													name: 'phone',
													allowBlank: false,
													blankText: 'Необходимо указать это поле',
													emptyText: 'Введите телефонный номер сим-карты',
													maxLength: 33,
													maxLengthText: 'Максимальная длина поля: {0}',
													minLength: 1
												},
												{
													xtype: 'numberfield',
													anchor: '100%',
													hidden: true,
													itemId: 'type',
													fieldLabel: 'Label',
													name: 'type',
													allowBlank: false,
													allowOnlyWhitespace: false,
													blankText: 'Необходимо указать тип оборудования',
													minValue: 1
												}
											]
										}
									],
									dockedItems: [
										{
											xtype: 'container',
											flex: 1,
											dock: 'bottom',
											layout: {
												align: 'middle',
												pack: 'center',
												type: 'hbox'
											},
											items: [
												{
													xtype: 'button',
													minWidth: 100,
													text: 'Отмена',
													listeners: {
														click: {
															fn: me.onButtonClick,
															scope: me
														}
													}
												},
												{
													xtype: 'button',
													formBind: true,
													disabled: true,
													itemId: 'continue',
													margin: 10,
													minWidth: 100,
													text: 'Сохранить',
													listeners: {
														click: {
															fn: me.onButtonClick1,
															scope: me
														}
													}
												}
											]
										}
									]
								}
							],
							listeners: {
								activate: {
									fn: me.onContainerBeforeShow1,
									scope: me
								}
							},
							tabConfig: {
								xtype: 'tab',
								closable: false
							}
						},
						{
							xtype: 'panel',
							autoRender: true,
							border: false,
							itemId: 'hardware',
							layout: {
								type: 'fit'
							},
							title: 'Аппаратные настройки',
							listeners: {
								activate: {
									fn: me.onContainerActivate,
									scope: me
								}
							}
						},
						{
							xtype: 'panel',
							itemId: 'sensors',
							layout: {
								type: 'fit'
							},
							title: 'Настройка датчиков',
							items: [
								{
									xtype: 'form',
									border: false,
									layout: {
										type: 'fit'
									},
									bodyPadding: 10,
									header: false,
									title: 'My Form',
									jsonSubmit: true,
									dockedItems: [
										{
											xtype: 'container',
											dock: 'bottom',
											layout: {
												align: 'middle',
												pack: 'center',
												type: 'hbox'
											},
											items: [
												{
													xtype: 'button',
													minWidth: 100,
													text: 'Отмена',
													listeners: {
														click: {
															fn: me.onButtonClick2,
															scope: me
														}
													}
												},
												{
													xtype: 'button',
													formBind: true,
													margin: 10,
													minWidth: 100,
													text: 'Сохранить',
													listeners: {
														click: {
															fn: me.onButtonClick3,
															scope: me
														}
													}
												}
											]
										}
									]
								}
							],
							listeners: {
								activate: {
									fn: me.onContainerActivate1,
									scope: me
								}
							}
						},
						{
							xtype: 'panel',
							itemId: 'lls_left',
							layout: {
								type: 'fit'
							},
							title: 'ДУТ левый',
							listeners: {
								activate: {
									fn: me.onLls_leftActivate,
									scope: me
								}
							}
						},
						{
							xtype: 'panel',
							itemId: 'lls_right',
							layout: {
								type: 'fit'
							},
							title: 'ДУТ правый',
							listeners: {
								activate: {
									fn: me.onLls_leftActivate1,
									scope: me
								}
							}
						},
						me.process({
							xtype: 'panel',
							itemId: 'fuel',
							layout: {
								type: 'fit'
							},
							title: 'Анализатор топлива',
							items: [
								{
									xtype: 'form',
									bodyPadding: 10,
									header: false,
									title: 'My Form',
									jsonSubmit: true,
									method: 'POST',
									items: [
										{
											xtype: 'combobox',
											anchor: '100%',
											fieldLabel: 'Уровень фильтрации',
											labelWidth: 180,
											name: 'filter_level',
											value: 02,
											allowBlank: false,
											allowOnlyWhitespace: false,
											editable: false,
											forceSelection: true,
											store: 'FilterTypes',
											valueField: 'id'
										},
										{
											xtype: 'numberfield',
											anchor: '100%',
											fieldLabel: 'Минимальная заправка (л)',
											labelWidth: 180,
											name: 'fill_threshold',
											value: 'не задано',
											allowBlank: false,
											allowOnlyWhitespace: false,
											blankText: 'Необходимо указать это поле'
										},
										{
											xtype: 'numberfield',
											anchor: '100%',
											fieldLabel: 'Минимальный слив (л)',
											labelWidth: 180,
											name: 'drain_threshold',
											value: 'не задано',
											allowBlank: false,
											allowOnlyWhitespace: false,
											blankText: 'Необходимо указать это поле'
										},
										{
											xtype: 'numberfield',
											anchor: '100%',
											fieldLabel: 'Максимальный рабочий расход в час (л)',
											labelWidth: 180,
											name: 'max_consumption',
											value: 'не задано',
											allowBlank: false,
											allowOnlyWhitespace: false
										}
									],
									dockedItems: [
										{
											xtype: 'container',
											dock: 'bottom',
											layout: {
												align: 'middle',
												pack: 'center',
												type: 'hbox'
											},
											items: [
												{
													xtype: 'button',
													flex: 1,
													text: 'Отмена',
													listeners: {
														click: {
															fn: me.onButtonClick5,
															scope: me
														}
													}
												},
												{
													xtype: 'button',
													formBind: true,
													margin: 10,
													minWidth: 100,
													text: 'Сохранить',
													listeners: {
														click: {
															fn: me.onButtonClick4,
															scope: me
														}
													}
												}
											]
										}
									]
								}
							],
							listeners: {
								activate: {
									fn: me.onFuelActivate,
									scope: me
								}
							}
						}),
						{
							xtype: 'panel',
							itemId: 'retranslator',
							margin: 5,
							layout: {
								type: 'fit'
							},
							title: 'Ретрансляция',
							items: [
								{
									xtype: 'form',
									itemId: 'retform',
									layout: {
										align: 'stretch',
										type: 'vbox'
									},
									bodyPadding: 10,
									header: false,
									title: 'My Form',
									jsonSubmit: true,
									method: 'POST',
									items: [
										{
											xtype: 'fieldset',
											flex: 1,
											layout: {
												type: 'fit'
											},
											title: 'Протокол',
											items: [
												{
													xtype: 'gridpanel',
													margin: '0, 0, 10 ,0',
													frameHeader: false,
													header: false,
													title: 'My Grid Panel',
													forceFit: true,
													hideHeaders: true,
													store: 'Retranslators',
													columns: [
														{
															xtype: 'gridcolumn',
															dataIndex: 'name',
															text: 'String'
														}
													],
													listeners: {
														select: {
															fn: me.onGridpanelSelect,
															scope: me
														}
													}
												}
											]
										},
										{
											xtype: 'numberfield',
											flex: 1,
											hidden: true,
											itemId: 'retranslator',
											name: 'retranslator',
											allowBlank: false,
											allowOnlyWhitespace: false
										},
										{
											xtype: 'textfield',
											itemId: 'host',
											fieldLabel: 'Адрес сервера',
											labelWidth: 150,
											name: 'host',
											allowBlank: false,
											allowOnlyWhitespace: false
										},
										{
											xtype: 'numberfield',
											itemId: 'rport',
											fieldLabel: 'Порт',
											labelWidth: 150,
											name: 'port',
											allowBlank: false,
											allowOnlyWhitespace: false,
											allowExponential: false,
											maxValue: 65535,
											minValue: 0
										},
										{
											xtype: 'textfield',
											itemId: 'login',
											fieldLabel: 'Имя пользователя',
											labelWidth: 150,
											name: 'login'
										},
										{
											xtype: 'textfield',
											itemId: 'password',
											fieldLabel: 'Пароль',
											labelWidth: 150,
											name: 'password'
										},
										{
											xtype: 'textfield',
											itemId: 'id',
											fieldLabel: 'Идентификатор на принимающей стороне',
											labelWidth: 150,
											name: 'id',
											allowBlank: false,
											allowOnlyWhitespace: false
										}
									],
									dockedItems: [
										{
											xtype: 'container',
											dock: 'bottom',
											layout: {
												align: 'middle',
												pack: 'center',
												type: 'hbox'
											},
											items: [
												{
													xtype: 'button',
													minWidth: 100,
													text: 'Отмена',
													listeners: {
														click: {
															fn: me.onButtonClick7,
															scope: me
														}
													}
												},
												{
													xtype: 'button',
													formBind: true,
													disabled: true,
													margin: 10,
													minWidth: 100,
													text: 'Сохранить',
													listeners: {
														click: {
															fn: me.onButtonClick6,
															scope: me
														}
													}
												}
											]
										}
									]
								}
							],
							listeners: {
								activate: {
									fn: me.onPanelActivate,
									scope: me
								}
							}
						}
					],
					listeners: {
						activate: {
							fn: me.onTabpanelActivate,
							scope: me
						}
					}
				}
			]
		});

		me.callParent(arguments);
	},

	process: function(config) {
		return config;
	},

	onTypeSelect: function(rowmodel, record, index, eOpts) {
		this.down('form').getForm().findField('type').setValue(record.getId());
	},

	onButtonClick: function(button, e, eOpts) {
		button.up('window').close();
	},

	onButtonClick1: function(button, e, eOpts) {
		var form = button.up('form');
		var window = button.up('window');

		if ((form.method != 'PUT')&&(!form.isDirty())) {
			window.down('tabpanel').setTabs(true);
			return;
		}

		var mask = Ext.getBody().mask('Сохранение данных', 'Сохранение');
		mask.setStyle('z-index', Ext.WindowMgr.zseed + 1000);

		form.submit({

			clientValidation: true,
			headers : { Authorization : MyApp.AuthString },

			success: function(form, action) {

				Ext.getBody().unmask();

				if (form.method == 'PUT') {
					window.terminal_id = action.result.object.id;
				}

				window.device = action.result.object;

				window.down('tabpanel').setTabs(true);

				MyApp.reload = true;
			},

			failure: function(form, action) {

				Ext.getBody().unmask();

				switch (action.failureType) {

					case Ext.form.action.Action.CLIENT_INVALID:
					Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
					break;

					case Ext.form.action.Action.CONNECT_FAILURE:
					Ext.Msg.alert('Failure', 'Ajax communication failed');
					break;

					case Ext.form.action.Action.SERVER_INVALID:
					Ext.Msg.alert('Failure', action.result.message);
					break;
				}
			}
		});

	},

	onContainerBeforeShow1: function(component, eOpts) {
		var mask = Ext.getBody().mask('Получение перечня типов оборудования', 'Загрузка');
		mask.setStyle('z-index', Ext.WindowMgr.zseed + 1000);

		var window = component.up('window');

		Ext.Ajax.request({
			url: '/devices',
			scope: component,
			headers : { Authorization : MyApp.AuthString },

			success: function(response, options){

				var grid = component.down('gridpanel');

				grid.getStore().loadData(Ext.decode(response.responseText).object);

				var form = component.down('form').getForm();

				if (typeof window.terminal_id != 'undefined') {

					form.method = 'POST';
					form.url = '/objects/' + window.terminal_id;

					var mask = Ext.getBody().mask('Получение основных данных', 'Загрузка');
					mask.setStyle('z-index', Ext.WindowMgr.zseed + 1000);

					Ext.Ajax.request({
						url: '/objects/' + window.terminal_id,
						scope: this,
						headers : { Authorization : MyApp.AuthString },

						success: function(response, options){

							Ext.getBody().unmask();

							data = Ext.decode(response.responseText).object;

							form.setValues(data);
							grid.getSelectionModel().select(grid.getStore().getById(data.type));
							window.device = data;
							window.down('tabpanel').setTabs(false);
						},

						failure: function(response, options){

							Ext.getBody().unmask();

							var statusCode = response.status;
							var statusText = response.statusText;

							Ext.MessageBox.show({
								title: 'Ошибка',
								msg: statusText + '[' + statusCode + ']',
								buttons: Ext.MessageBox.OK,
								icon: Ext.MessageBox.ERROR
							});
							window.close();
						},

						timeout: 60000
					});				
				}
				else {	
					Ext.getBody().unmask();
					form.method = 'PUT';
					form.url = '/objects/' + window.parent_id + '/devices';
				}									
			},

			failure: function(response, options){

				Ext.getBody().unmask();

				var statusCode = response.status;
				var statusText = response.statusText;

				Ext.MessageBox.show({
					title: 'Ошибка',
					msg: statusText + '[' + statusCode + ']',
					buttons: Ext.MessageBox.OK,
					icon: Ext.MessageBox.ERROR
				});

				window.close();
			},

			timeout: 60000
		});	

	},

	onContainerActivate: function(component, eOpts) {
		var mask = Ext.getBody().mask('Получение аппаратных настроек', 'Загрузка');
		mask.setStyle('z-index', Ext.WindowMgr.zseed + 1000);

		var window = component.up('window');

		Ext.Ajax.request({
			url: '/objects/' + window.terminal_id + '/settings',
			scope:this,
			headers : { Authorization : MyApp.AuthString },

			success: function(response, options){

				Ext.getBody().unmask();

				component.removeAll();

				component.add(
				MyApp.getApplication().createJWindow({
					json: Ext.decode(response.responseText).object,
					url: '/objects/' + window.terminal_id + '/settings',
					headers : { Authorization : MyApp.AuthString },
					action: 'POST',
					title : 'Изменение настроек оборудования',
					width: 768,
					height: 480,
					buttonText: 'Сохранить',
					success: function(form, action) {

						if (action !== null)
						window.device = action.result.object;

						window.down('tabpanel').setTabs(true);
					}
				})
				);
			},

			failure: function(response, options){

				Ext.getBody().unmask();

				var statusCode = response.status;
				var statusText = response.statusText;

				Ext.MessageBox.show({
					title: 'Ошибка',
					msg: statusText + '[' + statusCode + ']',
					buttons: Ext.MessageBox.OK,
					icon: Ext.MessageBox.ERROR
				}); 

				window.close();
			},
			timeout: 60000
		});	
	},

	onButtonClick2: function(button, e, eOpts) {
		var window = button.up('window');
		window.close();
	},

	onButtonClick3: function(button, e, eOpts) {
		var form = button.up('form');
		var window = button.up('window');

		if (!form.isDirty()) {
			window.down('tabpanel').setTabs(true);
			return;
		}

		var mask = Ext.getBody().mask('Сохранение данных', 'Сохранение');
		mask.setStyle('z-index', Ext.WindowMgr.zseed + 1000);

		form.submit({									

			clientValidation: true,
			headers : { Authorization : MyApp.AuthString },
			url: '/objects/' + window.terminal_id + '/sensors',

			success: function(form, action) {
				Ext.getBody().unmask();
				window.device = action.result.object;			
				window.down('tabpanel').setTabs(true);
			},

			failure: function(form, action) {

				Ext.getBody().unmask();

				switch (action.failureType) {

					case Ext.form.action.Action.CLIENT_INVALID:
					Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
					break;

					case Ext.form.action.Action.CONNECT_FAILURE:
					Ext.Msg.alert('Failure', 'Ajax communication failed');
					break;

					case Ext.form.action.Action.SERVER_INVALID:
					Ext.Msg.alert('Failure', action.result.message);
					break;
				}
			}
		});

	},

	onContainerActivate1: function(component, eOpts) {
		var window = component.up('window');
		var form = component.down('form');

		var caps = window.device.caps;

		var sensors = window.device.sensors || {};
		var items = [];

		for (var i = 1; i <= 8; i++) {

			if (caps['discrete' + i]) {

				items.push({

					xtype: 'fieldset',
					itemId: 'discrete' + i,
					title: 'Дискретный вход №' + i,
					items: [
					{
						xtype: 'textfield',
						anchor: '100%',
						itemId: 'discrete' + i + '_name',
						fieldLabel: 'Название датчика:',
						labelWidth: 150,
						name: 'discrete' + i + '_name',
						emptyText: 'Дискретный вход ' + i,
						maxLength: 256,
						value: sensors['discrete' + i + '_name']
					},
					{
						xtype: 'combobox',
						anchor: '100%',
						itemId: 'discrete' + i + '_type',
						fieldLabel: 'Тип датчика',
						labelWidth: 150,
						name: 'discrete' + i + '_type',
						value: 0,
						editable: false,
						queryMode: 'local',
						store: 'DiscreteSensorTypes',
						valueField: 'id',
						value: (sensors['discrete' + i + '_type'] || 0)
					}
					]
				});
			}
		}

		for (var i = 1; i <= 8; i++) {

			if (caps['counter' + i]) {

				items.push({

					xtype: 'fieldset',
					itemId: 'counter' + i,
					title: 'Импульсный вход №' + i,
					items: [
					{
						xtype: 'textfield',
						anchor: '100%',
						itemId: 'counter' + i + '_name',
						fieldLabel: 'Название датчика:',
						labelWidth: 150,
						name: 'counter' + i + '_name',
						emptyText: 'Импульсный вход ' + i,
						maxLength: 256,
						value: sensors['counter' + i + '_name']
					},
					{
						xtype: 'combobox',
						anchor: '100%',
						itemId: 'counter' + i + '_type',
						fieldLabel: 'Тип датчика',
						labelWidth: 150,
						name: 'counter' + i + '_type',
						value: 0,
						editable: false,
						queryMode: 'local',
						store: 'CounterSensorTypes',
						valueField: 'id',
						value: (sensors['counter' + i + '_type'] || 0)
					},
					{
						xtype: 'numberfield',
						anchor: '100%',
						itemId: 'counter' + i + '_factor',
						fieldLabel: 'Коэффициент',
						labelWidth: 150,
						name: 'counter' + i + '_factor',
						value: 1,
						decimalPrecision: 0,
						value: (sensors['counter' + i + '_factor'] || 1)
					}				   
					]
				});
			}
		}

		for (var i = 1; i <= 8; i++) {

			if (caps['frequency' + i]) {

				items.push({

					xtype: 'fieldset',
					itemId: 'frequency' + i,
					title: 'Частотный вход №' + i,
					items: [
					{
						xtype: 'textfield',
						anchor: '100%',
						itemId: 'frequency' + i + '_name',
						fieldLabel: 'Название датчика:',
						labelWidth: 150,
						name: 'frequency' + i + '_name',
						emptyText: 'Частотный вход ' + i,
						maxLength: 256,
						value: sensors['frequency' + i + '_name']
					},
					{
						xtype: 'combobox',
						anchor: '100%',
						itemId: 'frequency' + i + '_type',
						fieldLabel: 'Тип датчика',
						labelWidth: 150,
						name: 'frequency' + i + '_type',
						value: 0,
						editable: false,
						queryMode: 'local',
						store: 'FrequencySensorTypes',
						valueField: 'id',
						value: (sensors['frequency' + i + '_type'] || 0),
						listeners: {
							select: {
								fn: function(combo, records, eOpts) {
									if ((records[0].get('id') == 2)||(records[0].get('id') == 3)||(records[0].get('id') == 0))
									combo.up('fieldset').down('numberfield').hide();
									else
									combo.up('fieldset').down('numberfield').show();
								}				   
							},
							afterrender: {
								fn: function(combo, eOpts) {
									if ((combo.getValue() == 2)||(combo.getValue() == 3)||(combo.getValue() == 0))
									combo.up('fieldset').down('numberfield').hide();
									else
									combo.up('fieldset').down('numberfield').show();
								}				   
							},
						}				
					},
					{
						xtype: 'numberfield',
						anchor: '100%',
						itemId: 'frequency' + i + '_factor',
						fieldLabel: 'Коэффициент',
						labelWidth: 150,
						name: 'frequency' + i + '_factor',
						value: 1,
						decimalPrecision: 0,
						value: (sensors['frequency' + i + '_factor'] || 1)
					}				   
					]
				});
			}
		}

		for (var i = 1; i <= 8; i++) {

			if (caps['analog' + i]) {

				items.push({

					xtype: 'fieldset',
					itemId: 'analog' + i,
					title: 'Аналоговый вход №' + i,
					items: [
					{
						xtype: 'textfield',
						anchor: '100%',
						itemId: 'analog' + i + '_name',
						fieldLabel: 'Название датчика:',
						labelWidth: 150,
						name: 'analog' + i + '_name',
						emptyText: 'Аналоговый вход ' + i,
						maxLength: 256,
						value: sensors['analog' + i + '_name']
					},
					{
						xtype: 'combobox',
						anchor: '100%',
						itemId: 'analog' + i + '_type',
						fieldLabel: 'Тип датчика',
						labelWidth: 150,
						name: 'analog' + i + '_type',
						value: 0,
						editable: false,
						queryMode: 'local',
						store: 'ADCSensorTypes',
						valueField: 'id',
						value: (sensors['analog' + i + '_type'] || 0)
					}
					]
				});
			}
		}

		if (caps['injector']) {

			items.push({

				xtype: 'fieldset',
				itemId: 'injector',
				title: 'Форсунка',
				items: [
				{
					xtype: 'textfield',
					anchor: '100%',
					itemId: 'injector_name',
					fieldLabel: 'Название датчика:',
					labelWidth: 150,
					name: 'injector_name',
					emptyText: 'Форсунка',
					maxLength: 256,
					value: sensors['injector_name']
				},
				{
					xtype: 'numberfield',
					anchor: '100%',
					itemId: 'injector_factor',
					fieldLabel: 'Коэффициент',
					labelWidth: 150,
					name: 'injector_factor',
					value: 1,
					decimalPrecision: 0,
					value: (sensors['injector_factor'] || 1)
				}				   
				]
			});
		}

		if (caps['rs485']) {

			items.push(
			{
				xtype: 'fieldset',
				title: 'RS-485',
				items: [
				{
					xtype: 'checkboxfield',
					anchor: '100%',
					itemId: 'rs485_lls_left',
					name: 'rs485_lls_left',
					boxLabel: 'Левый ДУТ',
					checked: (sensors['rs485_lls_left'] || false)
				},
				{
					xtype: 'checkboxfield',
					anchor: '100%',
					itemId: 'rs485_lls_right',
					name: 'rs485_lls_right',
					boxLabel: 'Правый ДУТ',
					checked: (sensors['rs485_lls_right'] || false)
				},
				{
					xtype: 'checkboxfield',
					anchor: '100%',
					id: 'rs485_lls_swap',
					name: 'rs485_lls_swap',
					boxLabel: 'Поменять местами',
					checked: (sensors['rs485_lls_swap'] || false)
				}
				]
			}
			);
		}

		if (items.length == 0) {
			window.close();
			return;
		}

		var container = Ext.create('Ext.container.Container', {
			overflowY: 'scroll',
			items: items
		});

		form.removeAll();
		form.insert(0, container);

	},

	onLls_leftActivate: function(component, eOpts) {
		var form = Ext.create("MyApp.view.LLSForm");

		component.removeAll();

		component.add(form);

		var window = component.up('window');
		var grid = component.down('grid');
		var store = grid.getStore();

		form.getForm().url = '/objects/' + window.terminal_id + '/llsleft';

		store.removeAll();

		if (window.device.llsleft) {
			store.loadData(window.device.llsleft.table);
			form.getForm().setValues(window.device.llsleft);
		}

	},

	onLls_leftActivate1: function(component, eOpts) {
		var form = Ext.create("MyApp.view.LLSForm");

		component.removeAll();

		component.add(form);

		var window = component.up('window');
		var grid = component.down('grid');
		var store = grid.getStore();

		form.getForm().url = '/objects/' + window.terminal_id + '/llsright';

		store.removeAll();

		if (window.device.llsright) {
			store.loadData(window.device.llsright.table);
			form.getForm().setValues(window.device.llsright);
		}

	},

	onTabpanelActivate: function(component, eOpts) {
		component.setTabs(false);

	},

	onButtonClick5: function(button, e, eOpts) {
		var window = button.up('window');
		window.close();
	},

	onButtonClick4: function(button, e, eOpts) {
		var form = button.up('form');
		var window = button.up('window');

		if (!form.isDirty())
		{
			window.down('tabpanel').setTabs(true);
			return;
		}

		var mask = Ext.getBody().mask('Сохранение данных', 'Сохранение');
		mask.setStyle('z-index', Ext.WindowMgr.zseed + 1000);

		form.submit({

			url: '/objects/' + window.terminal_id + '/fuel',
			clientValidation: true,
			headers : { Authorization : MyApp.AuthString },

			success: function(form, action) {

				Ext.getBody().unmask();

				window.device = action.result.object;
				window.down('tabpanel').setTabs(true);
			},

			failure: function(form, action) {

				Ext.getBody().unmask();

				switch (action.failureType) {

					case Ext.form.action.Action.CLIENT_INVALID:
					Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
					break;

					case Ext.form.action.Action.CONNECT_FAILURE:
					Ext.Msg.alert('Failure', 'Ajax communication failed');
					break;

					case Ext.form.action.Action.SERVER_INVALID:
					Ext.Msg.alert('Failure', action.result.message);
					break;
				}
			}
		});

	},

	onFuelActivate: function(component, eOpts) {
		var window = component.up('window');
		var form = component.down('form');

		form.getForm().setValues(window.device.fuel);
	},

	onGridpanelSelect: function(rowmodel, record, index, eOpts) {
		this.down('#retform').getForm().findField('retranslator').setValue(record.getId());
	},

	onButtonClick7: function(button, e, eOpts) {
		button.up('window').close();
	},

	onButtonClick6: function(button, e, eOpts) {
		var form = button.up('form');
		var window = button.up('window');

		if ((form.method != 'PUT')&&(!form.isDirty())) {
			window.down('tabpanel').setTabs(true);
			return;
		}

		var mask = Ext.getBody().mask('Сохранение данных', 'Сохранение');
		mask.setStyle('z-index', Ext.WindowMgr.zseed + 1000);

		form.submit({

			clientValidation: true,
			headers : { Authorization : MyApp.AuthString },

			success: function(form, action) {

				Ext.getBody().unmask();

				if (form.method == 'PUT') {
					window.terminal_id = action.result.object.id;
				}

				window.device = action.result.object;

				window.down('tabpanel').setTabs(true);
			},

			failure: function(form, action) {

				Ext.getBody().unmask();

				switch (action.failureType) {

					case Ext.form.action.Action.CLIENT_INVALID:
					Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
					break;

					case Ext.form.action.Action.CONNECT_FAILURE:
					Ext.Msg.alert('Failure', 'Ajax communication failed');
					break;

					case Ext.form.action.Action.SERVER_INVALID:
					Ext.Msg.alert('Failure', action.result.message);
					break;
				}
			}
		});

	},

	onPanelActivate: function(component, eOpts) {
		var mask = Ext.getBody().mask('Получение перечня типов протоколов', 'Загрузка');
		mask.setStyle('z-index', Ext.WindowMgr.zseed + 1000);

		var window		= component.up('window');

		Ext.Ajax.request({
			url: '/retranslators',
			scope: component,
			headers : { Authorization : MyApp.AuthString },

			success: function(response, options){

				Ext.getBody().unmask();

				var grid = component.down('gridpanel');

				var ll = Ext.decode(response.responseText).object;

				ll.unshift({name: 'Без ретрансляции', id: 0});

				grid.getStore().loadData(ll);

				var form = component.down('form').getForm();
				form.url = '/objects/' + window.terminal_id + '/retranslator';

				var data = window.device.retranslator;

				if (typeof data == 'object') {
					grid.getSelectionModel().select(grid.getStore().getById(data.retranslator));
					form.setValues(data);
				}
			},

			failure: function(response, options){

				Ext.getBody().unmask();

				var statusCode	= response.status;
				var statusText	= response.statusText;

				Ext.MessageBox.show({
					title: 'Ошибка',
					msg: statusText + '[' + statusCode + ']',
					buttons: Ext.MessageBox.OK,
					icon: Ext.MessageBox.ERROR
				});

				window.close();
			},

			timeout: 60000
		});	

	}

});