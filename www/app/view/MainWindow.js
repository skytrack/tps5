/*
 * File: app/view/MainWindow.js
 *
 * This file was generated by Sencha Architect version 2.2.3.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.MainWindow', {
	extend: 'Ext.window.Window',

	height: 250,
	id: 'mainWindow',
	width: 400,
	layout: {
		align: 'stretch',
		type: 'hbox'
	},
	closable: false,
	title: 'СкайТрек - Автоматизированное рабочее место',
	maximized: true,

	initComponent: function() {
		var me = this;

		Ext.applyIf(me, {
			items: [
				{
					xtype: 'panel',
					border: false,
					width: 281,
					layout: {
						align: 'stretch',
						type: 'vbox'
					},
					collapseDirection: 'left',
					collapsible: true,
					title: 'Управление',
					items: [
						{
							xtype: 'container',
							itemId: 'period',
							layout: {
								align: 'stretch',
								type: 'vbox'
							},
							items: [
								{
									xtype: 'tc_datemenu',
									floating: false,
									itemId: 'date_picker',
									collapseDirection: 'top',
									collapsible: false,
									listeners: {
										select: {
											fn: me.onDatemenuSelect,
											scope: me
										}
									}
								},
								{
									xtype: 'panel',
									hidden: true,
									itemId: 'interval',
									layout: {
										align: 'stretch',
										type: 'vbox'
									},
									title: 'Интервал',
									items: [
										{
											xtype: 'datefield',
											id: 'interval_from',
											itemId: '',
											margin: 5,
											fieldLabel: 'Первый день',
											allowBlank: false,
											vtype: 'daterange',
											format: 'd.m.Y',
											showToday: false,
											listeners: {
												afterrender: {
													fn: me.onDatefieldAfterRender2,
													scope: me
												},
												validitychange: {
													fn: me.onInterval_fromValidityChange,
													scope: me
												},
												change: {
													fn: me.onInterval_fromChange,
													scope: me
												}
											}
										},
										{
											xtype: 'datefield',
											id: 'interval_to',
											margin: 5,
											fieldLabel: 'Последний день',
											allowBlank: false,
											vtype: 'daterange',
											format: 'd.m.Y',
											showToday: false,
											listeners: {
												afterrender: {
													fn: me.onDatefieldAfterRender3,
													scope: me
												},
												validitychange: {
													fn: me.onInterval_toValidityChange,
													scope: me
												},
												change: {
													fn: me.onInterval_toChange,
													scope: me
												}
											}
										},
										{
											xtype: 'toolbar',
											items: [
												{
													xtype: 'container',
													flex: 1,
													layout: {
														align: 'stretch',
														pack: 'center',
														type: 'hbox'
													},
													items: [
														{
															xtype: 'button',
															margin: 3,
															text: 'Календарь',
															listeners: {
																click: {
																	fn: me.onButtonClick7,
																	scope: me
																}
															}
														},
														{
															xtype: 'button',
															id: 'loadbutton',
															margin: 3,
															text: 'Загрузить',
															listeners: {
																click: {
																	fn: me.onButtonClick8,
																	scope: me
																}
															}
														}
													]
												}
											]
										}
									]
								}
							]
						},
						{
							xtype: 'treepanel',
							flex: 1,
							id: 'tree',
							title: 'Структура организации',
							enableColumnHide: false,
							enableColumnMove: false,
							forceFit: true,
							sortableColumns: false,
							viewConfig: {
								blockRefresh: false,
								loadMask: true,
								animate: false,
								plugins: [
									Ext.create('Ext.tree.plugin.TreeViewDragDrop', {
										allowParentInserts: true,
										dragText: '{0} Выбрано {1}'
									})
								],
								listeners: {
									beforedrop: {
										fn: me.onTreeViewDragDropBeforeDrop,
										scope: me
									}
								}
							},
							listeners: {
								afterrender: {
									fn: me.onTreepanelAfterRender,
									scope: me
								},
								select: {
									fn: me.onTreepanelSelect,
									scope: me
								},
								deselect: {
									fn: me.onTreepanelDeselect,
									scope: me
								},
								checkchange: {
									fn: me.onTreepanelCheckChange,
									scope: me
								},
								itemdblclick: {
									fn: me.onTreepanelItemDblClick,
									scope: me
								}
							},
							columns: [
								{
									xtype: 'treecolumn',
									sortable: false,
									dataIndex: 'text',
									flex: 1
								},
								{
									xtype: 'actioncolumn',
									draggable: false,
									resizable: false,
									enableColumnHide: false,
									align: 'right',
									hideable: false,
									stopSelection: false,
									items: [
										{
											handler: function(view, rowIndex, colIndex, item, e, record, row) {
												var window;

												if (record.raw.type === 0) {
													window = Ext.create("MyApp.view.UserWindow", {
														user_id: record.getId()
													});
												}
												else
												if (record.raw.type >= 1000) {
													window = Ext.create("MyApp.view.TerminalWindow", {
														terminal_id: record.getId()
													});
												}	
												else
												if (record.raw.type == 1) {
													window = Ext.create("MyApp.view.GroupWindow", {
														group_id: record.getId()
													});
												}	

												if (window) {
													MyApp.reload = false;	
													window.on("close", view.up('window').updateTree, this);
													window.show();
												}
											},
											getClass: function(v, metadata, r, rowIndex, colIndex, store) {
												if (!MyApp.tree.permission_admin) {
													return 'x-hidden';
												}

											},
											altText: 'Правка',
											icon: 'images/edit.png',
											tooltip: 'Правка'
										},
										{
											handler: function(view, rowIndex, colIndex, item, e, record, row) {
												var window = Ext.create("MyApp.view.UserWindow", {
													parent_id: record.getId()
												});

												window.on("close", view.up('window').updateTree, this);
												MyApp.reload = false;	
												window.show();
											},
											getClass: function(v, metadata, r, rowIndex, colIndex, store) {
												if ((!MyApp.tree.permission_admin)||(r.raw.type >= 1000)) {
													return 'x-hidden';
												}

											},
											altText: 'Создать пользователя',
											icon: 'images/adduser.png',
											tooltip: 'Создать пользователя'
										},
										{
											handler: function(view, rowIndex, colIndex, item, e, record, row) {
												var window = Ext.create("MyApp.view.GroupWindow", {
													parent_id: record.getId()
												});

												window.on("close", view.up('window').updateTree, this);
												MyApp.reload = false;	
												window.show();
											},
											getClass: function(v, metadata, r, rowIndex, colIndex, store) {
												if ((!MyApp.tree.permission_admin)||(r.raw.type >= 1000)) {
													return 'x-hidden';
												}
											},
											altText: 'Создать группу',
											icon: 'images/addgroup.png',
											tooltip: 'Создать группу'
										},
										{
											handler: function(view, rowIndex, colIndex, item, e, record, row) {
												var window = Ext.create("MyApp.view.TerminalWindow", {
													parent_id: record.getId()
												});

												window.on("close", view.up('window').updateTree, this);
												MyApp.reload = false;	
												window.show();

											},
											getClass: function(v, metadata, r, rowIndex, colIndex, store) {
												if ((!MyApp.tree.permission_admin)||(r.raw.type >= 1000)) {
													return 'x-hidden';
												}
											},
											altText: 'Добвавить терминал',
											icon: 'images/addterminal.png',
											tooltip: 'Добвавить терминал'
										},
										{
											handler: function(view, rowIndex, colIndex, item, e, record, row) {
												Ext.MessageBox.confirm('Подтверждение', 'Удалить объект "' + record.get('text') + '" ?', function(btn) {

													if (btn == 'yes') {

														var mask = Ext.getBody().mask('Удаление', 'Загрузка');
														mask.setStyle('z-index', Ext.WindowMgr.zseed + 1000);

														Ext.Ajax.request({
															url: '/objects/' + record.getId(),
															method: 'DELETE',
															scope:this,
															headers : { Authorization : MyApp.AuthString },

															success: function(response, options){

																Ext.getBody().unmask();	

																record.destroy();
															},

															failure: function(response, options){

																Ext.getBody().unmask();

																var statusCode = response.status;
																var statusText = response.statusText;

																Ext.MessageBox.show({
																	title: 'Ошибка',
																	msg: statusText + '[' + statusCode + ']',
																	buttons: Ext.MessageBox.OK,
																	icon: Ext.MessageBox.ERROR
																});
															},

															timeout: 60000
														});
													}
												});

											},
											getClass: function(v, metadata, r, rowIndex, colIndex, store) {
												if ((!MyApp.tree.permission_admin)||(rowIndex === 0)) {
													return 'x-hidden';
												}

											},
											altText: 'Удалить',
											icon: 'images/remove.png',
											tooltip: 'Удалить'
										}
									]
								}
							],
							tools: [
								{
									xtype: 'tool',
									type: 'search',
									listeners: {
										click: {
											fn: me.onToolClick,
											scope: me
										}
									}
								}
							],
							dockedItems: [
								{
									xtype: 'toolbar',
									dock: 'top',
									hidden: true,
									items: [
										{
											xtype: 'triggerfield',
											onTriggerClick: function() {
												this.reset();
												this.focus();
											},
											flex: 1,
											triggerCls: 'x-form-clear-trigger',
											listeners: {
												change: {
													fn: me.onTriggerfieldChange,
													scope: me
												}
											}
										}
									]
								}
							]
						}
					]
				},
				{
					xtype: 'splitter'
				},
				{
					xtype: 'tabpanel',
					flex: 1,
					id: 'tab',
					activeTab: 0,
					items: [
						{
							xtype: 'panel',
							border: false,
							itemId: 'map_tab',
							layout: {
								align: 'stretch',
								type: 'vbox'
							},
							header: false,
							title: 'Карта',
							listeners: {
								afterrender: {
									fn: me.onMapAfterRender,
									scope: me
								},
								resize: {
									fn: me.onMapResize,
									scope: me
								},
								activate: {
									fn: me.onMap_tabActivate,
									scope: me
								},
								deactivate: {
									fn: me.onMap_tabDeactivate,
									scope: me
								}
							},
							items: [
								{
									xtype: 'container',
									flex: 1,
									layout: {
										align: 'stretch',
										type: 'hbox'
									},
									items: [
										{
											xtype: 'container',
											flex: 1,
											id: 'map'
										},
										{
											xtype: 'splitter'
										},
										{
											xtype: 'panel',
											id: 'props_panel',
											margin: '',
											overflowY: 'auto',
											collapseDirection: 'right',
											collapsible: true,
											title: 'Свойства',
											items: [
												{
													xtype: 'container',
													itemId: 'props',
													margin: 5,
													items: [
														{
															xtype: 'displayfield',
															itemId: 'propName',
															fieldLabel: 'Название',
															value: 'Display Field'
														},
														{
															xtype: 'displayfield',
															itemId: 'propLink',
															fieldLabel: 'Связь',
															value: 'Display Field'
														},
														{
															xtype: 'displayfield',
															id: 'propNav',
															fieldLabel: 'Навигация',
															value: 'Display Field'
														},
														{
															xtype: 'displayfield',
															itemId: 'propIgn',
															fieldLabel: 'Зажигание',
															value: 'Display Field'
														},
														{
															xtype: 'displayfield',
															itemId: 'propEng',
															fieldLabel: 'Двигатель',
															value: 'Display Field'
														},
														{
															xtype: 'displayfield',
															itemId: 'propMov',
															fieldLabel: 'Состояние',
															value: 'Display Field'
														},
														{
															xtype: 'displayfield',
															itemId: 'propMil',
															fieldLabel: 'Пробег',
															value: 'Display Field'
														},
														{
															xtype: 'displayfield',
															itemId: 'propTim',
															fieldLabel: 'Время в пути',
															value: 'Display Field'
														},
														{
															xtype: 'displayfield',
															itemId: 'propSpeed',
															fieldLabel: 'Макс. скорость',
															value: 'Display Field'
														},
														{
															xtype: 'displayfield',
															itemId: 'propFuelStart',
															fieldLabel: 'Топливо в начале',
															value: 'Display Field'
														},
														{
															xtype: 'displayfield',
															itemId: 'propFuelEnd',
															fieldLabel: 'Топливо остаток',
															value: 'Display Field'
														},
														{
															xtype: 'displayfield',
															itemId: 'propEngStart',
															fieldLabel: 'Запусков двигателя',
															value: 'Display Field'
														},
														{
															xtype: 'displayfield',
															itemId: 'propStart',
															fieldLabel: 'Начало работы',
															value: 'Display Field'
														},
														{
															xtype: 'displayfield',
															itemId: 'propEnd',
															fieldLabel: 'Окончание работы',
															value: 'Display Field'
														}
													]
												}
											]
										}
									],
									listeners: {
										resize: {
											fn: me.onMapResize1,
											scope: me
										}
									}
								},
								{
									xtype: 'splitter'
								},
								{
									xtype: 'panel',
									flex: 0.25,
									itemId: 'chart_tab',
									layout: {
										type: 'fit'
									},
									title: 'График уровня топлива',
									listeners: {
										afterrender: {
											fn: me.onPanelAfterRender,
											scope: me
										}
									}
								}
							],
							dockedItems: [
								{
									xtype: 'toolbar',
									flex: 1,
									dock: 'top',
									items: [
										{
											xtype: 'button',
											handler: function(button, event) {
												MyApp.onlineTimer = 1;
											},
											itemId: 'map_update',
											text: 'Обновить'
										},
										{
											xtype: 'tbseparator'
										},
										{
											xtype: 'button',
											text: 'Спутник',
											listeners: {
												afterrender: {
													fn: me.onButtonAfterRender,
													scope: me
												},
												click: {
													fn: me.onButtonClick4,
													scope: me
												}
											}
										},
										{
											xtype: 'tbseparator'
										},
										{
											xtype: 'button',
											text: 'Измерить расстояние',
											listeners: {
												click: {
													fn: me.onButtonClick5,
													scope: me
												}
											}
										},
										{
											xtype: 'tbseparator'
										},
										{
											xtype: 'button',
											handler: function(button, event) {
												button.up('window').changeTrackMode(0);
											},
											itemId: 'mode_track_full',
											allowDepress: false,
											enableToggle: true,
											pressed: true,
											text: 'Полный трек',
											toggleGroup: 'mode'
										},
										{
											xtype: 'button',
											handler: function(button, event) {
												button.up('window').changeTrackMode(1);
											},
											itemId: 'mode_track_last',
											allowDepress: false,
											enableToggle: true,
											text: 'Последняя точка',
											toggleGroup: 'mode'
										},
										{
											xtype: 'button',
											handler: function(button, event) {
												button.up('window').changeTrackMode(5);
											},
											itemId: 'mode_track_five',
											allowDepress: false,
											enableToggle: true,
											text: 'Последние пять точек',
											toggleGroup: 'mode'
										},
										{
											xtype: 'tbseparator'
										},
										{
											xtype: 'button',
											toggleHandler: function(button, state) {
												MyApp.pack_parks = state;
												button.up('window').changeTrackMode(MyApp.trackMode);
											},
											id: 'pack_parks',
											enableToggle: true,
											pressed: true,
											text: 'Сжать стоянки'
										},
										{
											xtype: 'button',
											toggleHandler: function(button, state) {
												MyApp.show_labels = state;
												button.up('window').removeAllOverlays();
												button.up('window').createAllOverlays();
											},
											itemId: 'show_labels',
											enableToggle: true,
											pressed: true,
											text: 'Показать ярлыки'
										}
									]
								},
								{
									xtype: 'toolbar',
									flex: 1,
									dock: 'top',
									items: [
										{
											xtype: 'multislider',
											tipText: function(thumb) {
												function beauty_time(t) {

													var date = new Date(t * 1000);

													var d = date.getDate();
													var M = date.getMonth() + 1;
													var y = date.getYear() + 1900;
													var h = date.getHours();
													var m = date.getMinutes();
													var s = date.getSeconds();

													if (d < 10) d = '0' + d;
													if (M < 10) M = '0' + M;
													if (h < 10) h = '0' + h;
													if (m < 10) m = '0' + m;
													if (s < 10) s = '0' + s;

													return d + '.' + M + '.' + y + ' ' + h + ':' + m + ':' + s;
												}

												return beauty_time(thumb.value);
											},
											flex: 1,
											width: 400,
											fieldLabel: '&nbsp;Фрагмент',
											maxValue: 86399,
											values: [
												0,
												86399
											],
											listeners: {
												changecomplete: {
													fn: me.onMultisliderChangeComplete,
													scope: me
												}
											}
										}
									]
								}
							]
						},
						{
							xtype: 'panel',
							itemId: 'reports_tab',
							layout: {
								type: 'fit'
							},
							title: 'Отчеты',
							dockedItems: [
								{
									xtype: 'toolbar',
									dock: 'top',
									items: [
										{
											xtype: 'tbspacer'
										},
										{
											xtype: 'combobox',
											itemId: 'report_id',
											width: 250,
											fieldLabel: 'Отчет',
											labelWidth: 50,
											editable: false,
											store: 'ReportTypes',
											valueField: 'id',
											listeners: {
												afterrender: {
													fn: me.onComboboxAfterRender,
													scope: me
												}
											}
										},
										{
											xtype: 'tbspacer'
										},
										{
											xtype: 'datefield',
											itemId: 't_from',
											fieldLabel: 'Начало',
											labelWidth: 50,
											format: 'd.m.Y H:i:s',
											showToday: false,
											startDay: 1,
											listeners: {
												afterrender: {
													fn: me.onDatefieldAfterRender,
													scope: me
												},
												select: {
													fn: me.onT_fromSelect,
													scope: me
												},
												validitychange: {
													fn: me.onT_fromValidityChange,
													scope: me
												}
											}
										},
										{
											xtype: 'tbspacer'
										},
										{
											xtype: 'datefield',
											itemId: 't_to',
											fieldLabel: 'Окончание',
											enableKeyEvents: true,
											format: 'd.m.Y H:i:s',
											showToday: false,
											startDay: 1,
											listeners: {
												afterrender: {
													fn: me.onDatefieldAfterRender1,
													scope: me
												},
												select: {
													fn: me.onT_toSelect,
													scope: me
												},
												validitychange: {
													fn: me.onT_toValidityChange,
													scope: me
												}
											}
										},
										{
											xtype: 'tbspacer'
										},
										{
											xtype: 'button',
											text: 'Сформировать',
											listeners: {
												click: {
													fn: me.onButtonClick,
													scope: me
												}
											}
										},
										{
											xtype: 'button',
											id: 'pdf_button_vert',
											text: 'PDF, Вертикально',
											listeners: {
												click: {
													fn: me.onButtonClick3,
													scope: me
												}
											}
										},
										{
											xtype: 'button',
											id: 'pdf_button_horz',
											itemId: '',
											text: 'PDF, Горизонтально',
											listeners: {
												click: {
													fn: me.onPdf_button_horzClick,
													scope: me
												}
											}
										}
									]
								}
							],
							listeners: {
								activate: {
									fn: me.onReports_tabActivate,
									scope: me
								},
								deactivate: {
									fn: me.onReports_tabDeactivate,
									scope: me
								}
							}
						},
						{
							xtype: 'panel',
							itemId: 'charts_tab',
							overflowY: 'auto',
							layout: {
								align: 'stretch',
								type: 'vbox'
							},
							title: 'Графики',
							listeners: {
								activate: {
									fn: me.onCharts_tabActivate,
									scope: me
								},
								deactivate: {
									fn: me.onCharts_tabDeactivate,
									scope: me
								}
							},
							dockedItems: [
								{
									xtype: 'toolbar',
									flex: 1,
									dock: 'top',
									items: [
										{
											xtype: 'button',
											text: 'Настройка вида и порядка',
											listeners: {
												click: {
													fn: me.onButtonClick1,
													scope: me
												}
											}
										},
										{
											xtype: 'tbspacer'
										},
										{
											xtype: 'checkboxfield',
											getState: function() {
												return { checked: this.getValue() };
											},
											applyState: function(state) {
												this.setValue( state.checked );

											},
											stateEvents: [
												'change'
											],
											stateId: 'chart_ignition',
											stateful: true,
											itemId: 'ignition_checkbox',
											boxLabel: 'Отсекать по зажиганию',
											listeners: {
												change: {
													fn: me.onIgnition_checkboxChange,
													scope: me
												}
											}
										},
										{
											xtype: 'tbspacer'
										},
										{
											xtype: 'checkboxfield',
											getState: function() {
												return { checked: this.getValue() };
											},
											applyState: function(state) {
												this.setValue( state.checked );

											},
											stateEvents: [
												'change'
											],
											stateId: 'chart_fix',
											stateful: true,
											itemId: 'fix_checkbox',
											boxLabel: 'Скрепить графики'
										}
									]
								}
							]
						},
						{
							xtype: 'panel',
							itemId: 'journal_tab',
							layout: {
								type: 'fit'
							},
							title: 'Журнал',
							listeners: {
								activate: {
									fn: me.onPanelActivate,
									scope: me
								},
								deactivate: {
									fn: me.onPanelDeactivate,
									scope: me
								}
							},
							items: [
								{
									xtype: 'panel',
									border: false,
									layout: {
										type: 'fit'
									},
									title: 'My Panel',
									items: [
										{
											xtype: 'gridpanel',
											stateId: 'journalGrid',
											cls: 'journal-strip',
											itemId: 'journal',
											header: false,
											columnLines: false,
											forceFit: true,
											columns: [
												{
													xtype: 'gridcolumn',
													dataIndex: 'time',
													text: 'Время'
												},
												{
													xtype: 'gridcolumn',
													dataIndex: 'event',
													text: 'Событие'
												},
												{
													xtype: 'gridcolumn',
													dataIndex: 'address',
													text: 'Адрес'
												}
											],
											listeners: {
												itemdblclick: {
													fn: me.onJournalItemDblClick,
													scope: me
												}
											},
											plugins: [
												Ext.create('Ext.grid.plugin.BufferedRenderer', {

												})
											]
										}
									]
								}
							]
						},
						{
							xtype: 'panel',
							id: '',
							itemId: 'table_tab',
							width: 796,
							layout: {
								type: 'fit'
							},
							title: 'Таблица',
							listeners: {
								activate: {
									fn: me.onTable_tabActivate,
									scope: me
								},
								deactivate: {
									fn: me.onTable_tabDeactivate,
									scope: me
								}
							},
							dockedItems: [
								{
									xtype: 'toolbar',
									dock: 'top',
									items: [
										{
											xtype: 'button',
											handler: function(button, event) {
												MyApp.onlineTimer = 1;
											},
											itemId: 'table_update',
											text: 'Обновить'
										},
										{
											xtype: 'button',
											text: 'Настройка вида и порядка',
											listeners: {
												click: {
													fn: me.onButtonClick2,
													scope: me
												}
											}
										},
										{
											xtype: 'tbspacer'
										},
										{
											xtype: 'checkboxfield',
											getState: function() {
												return { checked: this.getValue() };
											},
											applyState: function(state) {
												this.setValue( state.checked );
											},
											stateEvents: [
												'change'
											],
											stateId: 'table_ignition',
											stateful: true,
											itemId: 'ignition_checkbox',
											boxLabel: 'Отсекать по зажиганию',
											listeners: {
												change: {
													fn: me.onIgnition_checkboxChange1,
													scope: me
												}
											}
										}
									]
								}
							],
							items: [
								{
									xtype: 'panel',
									border: false,
									layout: {
										type: 'fit'
									},
									title: 'My Panel',
									items: [
										{
											xtype: 'gridpanel',
											stateId: 'tableGrid',
											id: 'table_grid',
											itemId: 'table',
											header: false,
											title: 'My Grid Panel',
											enableColumnHide: false,
											enableColumnMove: false,
											forceFit: true,
											viewConfig: {
												preserveScrollOnRefresh: true
											},
											columns: [
												{
													xtype: 'gridcolumn',
													enableColumnHide: false,
													dataIndex: 'time',
													text: 'Время'
												}
											],
											listeners: {
												itemdblclick: {
													fn: me.onTable_gridItemDblClick,
													scope: me
												},
												celldblclick: {
													fn: me.onTable_gridCellDblClick,
													scope: me
												}
											},
											plugins: [
												Ext.create('Ext.grid.plugin.BufferedRenderer', {

												}),
												Ext.create('Ext.grid.plugin.CellEditing', {
													listeners: {
														edit: {
															fn: me.onCellEditingEdit,
															scope: me
														}
													}
												})
											]
										}
									]
								}
							]
						},
						{
							xtype: 'panel',
							itemId: 'info_tab',
							margin: 10,
							overflowX: 'auto',
							overflowY: 'auto',
							layout: {
								align: 'stretch',
								type: 'vbox'
							},
							title: 'Информация',
							listeners: {
								activate: {
									fn: me.onInfo_tabActivate,
									scope: me
								}
							},
							items: [
								{
									xtype: 'form',
									flex: 1,
									border: false,
									frameHeader: false,
									header: false,
									title: 'My Form',
									items: [
										{
											xtype: 'fieldset',
											title: 'Общая',
											items: [
												{
													xtype: 'textfield',
													anchor: '100%',
													itemId: 'name',
													fieldLabel: 'Название',
													labelWidth: 150
												},
												{
													xtype: 'displayfield',
													anchor: '100%',
													itemId: 'dev_id',
													fieldLabel: 'Идентификатор',
													labelWidth: 150,
													value: 'Display Field'
												},
												{
													xtype: 'displayfield',
													anchor: '100%',
													itemId: 'phone',
													fieldLabel: 'Номер сим-карты',
													labelWidth: 150,
													value: 'Display Field'
												},
												{
													xtype: 'displayfield',
													anchor: '100%',
													itemId: 'fw',
													fieldLabel: 'Прошивка',
													labelWidth: 150,
													value: 'Display Field'
												},
												{
													xtype: 'displayfield',
													anchor: '100%',
													itemId: 'balance',
													fieldLabel: 'Баланс',
													labelWidth: 150,
													value: 'Display Field'
												},
												{
													xtype: 'filefield',
													anchor: '100%',
													hidden: true,
													itemId: 'foto',
													fieldLabel: 'Фотография',
													labelWidth: 150,
													inputId: 'foto',
													buttonText: 'Обзор...'
												},
												{
													xtype: 'textareafield',
													anchor: '100%',
													id: 'info',
													fieldLabel: 'Заметки',
													labelWidth: 150
												},
												{
													xtype: 'colormenu',
													border: false,
													floating: false,
													itemId: 'color',
													width: 286,
													showSeparator: false
												},
												{
													xtype: 'container',
													layout: {
														align: 'center',
														type: 'vbox'
													},
													items: [
														{
															xtype: 'button',
															margin: 10,
															text: 'Сохранить',
															listeners: {
																click: {
																	fn: me.onButtonClick6,
																	scope: me
																}
															}
														}
													]
												}
											]
										}
									]
								}
							]
						},
						{
							xtype: 'panel',
							itemId: 'list_tab',
							layout: {
								type: 'fit'
							},
							title: 'Сводный список',
							items: [
								{
									xtype: 'filterGrid',
									stateId: 'listGrid',
									stateful: true,
									itemId: 'list',
									header: false,
									title: 'My Grid Panel',
									forceFit: true,
									columns: [
										{
											xtype: 'rownumberer',
											resizable: true
										},
										{
											xtype: 'gridcolumn',
											filter: 'true',
											filterable: 'true',
											dataIndex: 'text',
											text: 'Название'
										},
										{
											xtype: 'gridcolumn',
											dataIndex: 'imei',
											text: 'IMEI'
										},
										{
											xtype: 'gridcolumn',
											dataIndex: 'type',
											text: 'Тип'
										},
										{
											xtype: 'gridcolumn',
											dataIndex: 'phone',
											text: 'Телефон'
										},
										{
											xtype: 'gridcolumn',
											dataIndex: 'link',
											text: 'Связь'
										},
										{
											xtype: 'gridcolumn',
											dataIndex: 'nav_valid',
											text: 'Навигация'
										},
										{
											xtype: 'gridcolumn',
											dataIndex: 'fw',
											text: 'Прошивка'
										},
										{
											xtype: 'gridcolumn',
											dataIndex: 'last_point',
											text: 'Последняя точка'
										}
									],
									viewConfig: {
										stateId: 'listG',
										stateful: true
									},
									plugins: [
										Ext.create('Ext.grid.plugin.BufferedRenderer', {

										})
									]
								}
							],
							listeners: {
								activate: {
									fn: me.onList_tabActivate,
									scope: me
								}
							}
						}
					]
				}
			],
			listeners: {
				afterrender: {
					fn: me.onMainWindowAfterRender,
					scope: me
				},
				close: {
					fn: me.onMainWindowClose,
					scope: me
				}
			}
		});

		me.callParent(arguments);
	},

	onDatemenuSelect: function(datepicker, date, eOpts) {
		MyApp.t_from				= datepicker.getValue().getTime() / 1000;
		MyApp.t_to					= MyApp.t_from + 86399;
		MyApp.visible_time_begin	= MyApp.t_from;
		MyApp.visible_time_end		= MyApp.t_to;

		delete MyApp.tableData;
		delete MyApp.journalData;
		delete MyApp.chartsData;
		delete MyApp.mapData;

		var window = datepicker.up('window');

		var multislider = window.down('multislider');

		multislider.setMinValue(MyApp.t_from);
		multislider.setMaxValue(MyApp.t_to);
		multislider.setValue(0, MyApp.t_from);
		multislider.setValue(1, MyApp.t_to);

		window.down('#tree').getRootNode().cascadeBy( 

		function(n) {

			if (n.raw.type >= 1000) {
				n.terminal.clear();
				n.terminal.this_period_loaded = false;
			}
		}
		);

		var tab	= window.down('tabpanel');

		var active_tab = tab.getActiveTab().itemId;

		if ((active_tab == 'map_tab')||(active_tab == 'table_tab')||(active_tab == 'journal_tab')) {

			var now = new Date().getTime() / 1000;

			if ((now >= MyApp.t_from)&&(now <= MyApp.t_to)) {

				MyApp.onlineMergeEnabled = true;	
				window.down('#map_update').enable();
				window.down('#table_update').enable();
			}
			else {
				MyApp.onlineMergeEnabled = false;	
				window.down('#map_update').disable();
				window.down('#table_update').disable();
			}
		}

		if ((active_tab == 'table_tab')||(active_tab == 'journal_tab')||(active_tab == 'charts_tab')) {

			var record = MyApp.selectedRecord;

			if (typeof record == 'object') {
				window.loadHistory([record]);
			}
		}

		window.removeAllOverlays();

		if (active_tab == 'map_tab') {
			window.loadHistory(MyApp.visibleList);	
		}

	},

	onDatefieldAfterRender2: function(component, eOpts) {
		var date = new Date();

		date.setHours(0);
		date.setMinutes(0);
		date.setSeconds(0);
		component.setValue(date);
		component.endDateField = 'interval_to';
	},

	onInterval_fromValidityChange: function(field, isValid, eOpts) {
		field.up('container').down('#loadbutton').setDisabled(!(Ext.getCmp('interval_from').isValid() && Ext.getCmp('interval_to').isValid()));
	},

	onInterval_fromChange: function(field, newValue, oldValue, eOpts) {
		MyApp.t_from = newValue.getTime() / 1000;
	},

	onDatefieldAfterRender3: function(component, eOpts) {
		var date = new Date();

		date.setHours(0);
		date.setMinutes(0);
		date.setSeconds(0);

		component.setValue(date);
		component.setMaxValue(new Date(date.getTime() + 86400 * 1000 * 7));

		component.startDateField = 'interval_from';
	},

	onInterval_toValidityChange: function(field, isValid, eOpts) {
		field.up('container').down('#loadbutton').setDisabled(!(Ext.getCmp('interval_from').isValid() && Ext.getCmp('interval_to').isValid()));
	},

	onInterval_toChange: function(field, newValue, oldValue, eOpts) {
		MyApp.t_to = newValue.getTime() / 1000 + 86300;
	},

	onButtonClick7: function(button, e, eOpts) {
		button.up('panel').hide();
		button.up('window').down('tc_datemenu').show();
		MyApp.time_source = 1;
	},

	onButtonClick8: function(button, e, eOpts) {
		MyApp.t_from = button.up('panel').down('#interval_from').getValue().getTime() / 1000;
		MyApp.t_to = button.up('panel').down('#interval_to').getValue().getTime() / 1000 + 86399;
		MyApp.visible_time_begin	= MyApp.t_from;
		MyApp.visible_time_end		= MyApp.t_to;

		delete MyApp.tableData;
		delete MyApp.journalData;
		delete MyApp.chartsData;
		delete MyApp.mapData;

		var window = button.up('window');

		var multislider = window.down('multislider');

		multislider.setMinValue(MyApp.t_from);
		multislider.setMaxValue(MyApp.t_to);
		multislider.setValue(0, MyApp.t_from);
		multislider.setValue(1, MyApp.t_to);

		window.down('#tree').getRootNode().cascadeBy( 

		function(n) {

			if (n.raw.type >= 1000) {
				n.terminal.clear();
				n.terminal.this_period_loaded = false;
			}
		}
		);

		var tab	= window.down('tabpanel');

		var active_tab = tab.getActiveTab().itemId;

		if ((active_tab == 'map_tab')||(active_tab == 'table_tab')||(active_tab == 'journal_tab')) {

			var now = new Date().getTime() / 1000;

			if ((now >= MyApp.t_from)&&(now <= MyApp.t_to)) {

				MyApp.onlineMergeEnabled = true;	
				window.down('#map_update').enable();
				window.down('#table_update').enable();
			}
			else {
				MyApp.onlineMergeEnabled = false;	
				window.down('#map_update').disable();
				window.down('#table_update').disable();
			}
		}

		if ((active_tab == 'table_tab')||(active_tab == 'journal_tab')||(active_tab == 'charts_tab')) {

			var record = MyApp.selectedRecord;

			if (typeof record == 'object') {
				window.loadHistory([record]);
			}
		}

		window.removeAllOverlays();

		if (active_tab == 'map_tab') {
			window.loadHistory(MyApp.visibleList);	
		}

	},

	onTreeViewDragDropBeforeDrop: function(node, data, overModel, dropPosition, dropHandlers, eOpts) {
		dropHandlers.wait = true;

		var mask = Ext.getBody().mask('Сохранение', '');
		mask.setStyle('z-index', Ext.WindowMgr.zseed + 1000);

		Ext.Ajax.request({
			url: '/objects/' + data.records[0].getId() + '/move'+dropPosition,
			method: 'POST',
			scope:this,
			headers : { Authorization : MyApp.AuthString },
			jsonData: {parent_id: overModel.getId()},

			success: function(response, options){

				Ext.getBody().unmask();

				dropHandlers.processDrop();
			},

			failure: function(response, options){

				Ext.getBody().unmask();

				dropHandlers.cancelDrop();
			},
			timeout: 60000
		});
	},

	onTreepanelAfterRender: function(component, eOpts) {
		component.setRootNode(MyApp.tree);

		component.getRootNode().cascadeBy( 

		function(n) {

			if (n.raw.type >= 1000) {

				var terminal = new Terminal(n.raw);

				terminal.current_period_loaded = false;

				n.terminal = terminal;
			}
		}
		);

	},

	onTreepanelSelect: function(rowmodel, record, index, eOpts) {
		console.log('select');

		MyApp.selectedRecord = record;

		if (record.raw.type < 1000) {
			return;
		}

		var sl				= MyApp.selectedList;
		var index			= sl.indexOf(record);
		var active_tab		= this.down('tabpanel').getActiveTab();
		var active_tab_id	= active_tab.itemId;
		var terminal		= record.terminal;

		if (index == -1) {		
			sl.push(record);
		}

		if (active_tab_id == 'map_tab') {

			if (index == -1) {

				MyApp.visibleList.push(record);
			}

			if ((typeof terminal != 'object')||(terminal.this_period_loaded !== true)) {
				this.loadHistory([record]);
			}
			else {

				if (index == -1) {

					terminal.createOverlays(MyApp.visible_time_begin, MyApp.visible_time_end, MyApp.pack_parks, MyApp.trackMode);

					this.createOverlays(terminal);
				}

				this.updateProperties();
				this.updateFuelChart();

				if (terminal.min_lat != 90) {
					MyApp.map.fitBounds([ [ terminal.max_lat,terminal. min_lng] , [ terminal.min_lat, terminal.max_lng] ], {
						animate: false
					});
				}
			}
		}
		else
		if (active_tab_id == 'charts_tab') {

			if ((typeof terminal != 'object')||(terminal.this_period_loaded !== true)) {
				this.loadHistory([record]);
			}
			else {
				this.createCharts(record);
			}
		}
		else
		if (active_tab_id == 'journal_tab') {

			if ((typeof terminal != 'object')||(terminal.this_period_loaded !== true)) {
				this.loadHistory([record]);
			}
			else {
				this.createJournal(record);
			}
		}
		else
		if (active_tab_id == 'table_tab') {

			if ((typeof terminal != 'object')||(terminal.this_period_loaded !== true)) {
				this.loadHistory([record]);
			}
			else {
				this.createTable(record);
			}
		}
		else
		if (active_tab_id == 'info_tab') {
			this.createInfo(record)
		}
	},

	onTreepanelDeselect: function(rowmodel, record, index, eOpts) {
		if (record.raw.type < 1000) {
			return;
		}	

		var sl				= MyApp.selectedList;
		var index			= sl.indexOf(record);
		var active_tab		= this.down('tabpanel').getActiveTab();
		var active_tab_id	= active_tab.itemId;
		var removed;

		if ((index != -1)&&(record.get('checked') !== true)) {
			sl.splice(index, 1);
			removed = true;
		}
		else {
			removed = false;
		}

		if (active_tab_id == 'map_tab') {

			if (removed) {

				var vl = MyApp.visibleList;

				index = vl.indexOf(record);
				if (index != -1) {
					vl.splice(index, 1);
				}

				MyApp.park_markers.beginUpdate();
				MyApp.tooltips.beginUpdate();
				MyApp.last_point_markers.beginUpdate();

				this.removeOverlays(record.terminal);

				MyApp.last_point_markers.endUpdate();
				MyApp.park_markers.endUpdate();
				MyApp.tooltips.endUpdate();
			}
		}
		else
		if (active_tab_id == 'charts_tab') {
		}
		else
		if (active_tab_id == 'journal_tab') {
		}
		else
		if (active_tab_id == 'table_tab') {
		}
		else
		if (active_tab_id == 'info_tab') {
		}

		delete MyApp.selectedRecord;
		delete MyApp.tableData;
		delete MyApp.journalData;
		delete MyApp.chartsData;
		delete MyApp.mapData;

		this.updateProperties();
		this.updateFuelChart();

	},

	onTreepanelCheckChange: function(node, checked, eOpts) {
		console.log('checkchange');

		var sl = MyApp.selectedList;
		var record;
		var index;
		var dl = [];
		var self = this;

		var active_tab = this.down('tabpanel').getActiveTab().itemId;

		if (active_tab == 'map_tab') {

			var vl = MyApp.visibleList;

			MyApp.park_markers.beginUpdate();
			MyApp.tooltips.beginUpdate();
			MyApp.last_point_markers.beginUpdate();

			if (checked) {

				node.cascadeBy( function(record){

					record.set('checked', true);

					if (record.raw.type >= 1000) {

						if (sl.indexOf(record) == -1) {

							sl.push(record);

							if (vl.indexOf(record) == -1) {
								vl.push(record);
							}

							var terminal = record.terminal;

							if ((typeof terminal != 'object')||(terminal.this_period_loaded !== true)) {
								dl.push(record);
							}
							else {
								terminal.createOverlays(MyApp.visible_time_begin, MyApp.visible_time_end, MyApp.pack_parks, MyApp.trackMode);
								self.createOverlays(terminal);
							}
						}
					}
				});
			}
			else {

				node.cascadeBy( function(record){

					record.set('checked', false);

					index = sl.indexOf(record);

					if (index != -1) {
						sl.splice(index, 1);
						self.removeOverlays(record.terminal);
					}

					index = vl.indexOf(record);

					if (index != -1) {
						vl.splice(index, 1);
					}
				});	
			}

			MyApp.last_point_markers.endUpdate();
			MyApp.park_markers.endUpdate();
			MyApp.tooltips.endUpdate();	

			if (dl.length > 0) {
				this.loadHistory(dl);
			}
		}
		else {

			if (checked) {

				node.cascadeBy( function(record){

					record.set('checked', true);

					if (record.raw.type >= 1000) {

						if (sl.indexOf(record) == -1) {

							sl.push(record);
						}
					}
				});
			}
			else {

				node.cascadeBy( function(record){

					record.set('checked', false);

					index = sl.indexOf(record);

					if (index != -1) {
						sl.splice(index, 1);
					}
				});	
			}
		}
	},

	onTreepanelItemDblClick: function(dataview, record, item, index, e, eOpts) {
		var terminal = record.terminal;

		if (typeof terminal.nav == 'object') {
			Ext.getCmp('tab').setActiveTab(0);
			MyApp.map.setView([terminal.nav.lat, terminal.nav.lng], 16);
		}
	},

	onToolClick: function(tool, e, eOpts) {
		tool.up('panel').down('toolbar').setVisible(!tool.up('panel').down('toolbar').isVisible());
	},

	onTriggerfieldChange: function(field, newValue, oldValue, eOpts) {
		var me = this,
			tree = field.up('panel'),
			matches = [],
			root = tree.getRootNode(),
			visibleNodes = [],
			viewNode;

		if (Ext.isEmpty(newValue)) {

			tree.collapseAll();

			root.cascadeBy(function (node) {
				viewNode = Ext.fly(tree.getView().getNode(node));
				if (viewNode) {
					viewNode.show();
				}
			});

			return;
		}

		Ext.suspendLayouts();

		tree.expandAll();

		root.cascadeBy(function (node) {
			if ((node.get('text').search(newValue) != -1)||((typeof node.raw.dev_id == 'string')&&(node.raw.dev_id.search(newValue) != -1))) {
				matches.push(node);
			}
		});

		Ext.each(matches, function (item, i, arr) {
			root.cascadeBy(function (node) {
				if (node.contains(item) === true) {
					visibleNodes.push(node);
				}
			});

			if (!item.isLeaf()) {
				item.cascadeBy(function (node) {
					visibleNodes.push(node);
				});
			}

			visibleNodes.push(item);
		});

		root.cascadeBy(function (node) {
			viewNode = Ext.fly(tree.getView().getNode(node));
			if (viewNode) {
				viewNode.setVisibilityMode(Ext.Element.DISPLAY);
				viewNode.setVisible(Ext.Array.contains(visibleNodes, node));
			}
		});

		Ext.resumeLayouts();

	},

	onMapAfterRender: function(component, eOpts) {
		var map = new L.Map('map');

		map.setView(new L.LatLng(0, 0), 3);

		MyApp.osm_layer = new L.TileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
		minZoom: 3,
		maxZoom: 19,
		attribution: 'Map data © <a href="http://openstreetmap.org">OpenStreetMap</a> contributors'
	});
	MyApp.sat_layer = new L.Google();
	map.addLayer(MyApp.osm_layer);
	MyApp.map = map;

	var ST;
	MyApp.layer = new L.TileLayer.VectorLayer({size: 1000, autoresize: true});
	map.addLayer(MyApp.layer);

	MyApp.park_markers = MyApp.layer.createMarkersArray(
	{
		url: 'images/parking.png',
		width: 16,
		height: 16,
		sprites_count: 1,
		offset_x: 0,
		offset_y: 0,
		z_index: 4,
		layer: MyApp.layer
	}
	);

	MyApp.layer.addOverlay(MyApp.park_markers);

	MyApp.last_point_markers = MyApp.layer.createMarkersArray(
	{
		url: 'images/arrow.png',
		width: 32,
		height: 32,
		sprites_count: 1,
		offset_x: 0,
		offset_y: 0,
		z_index: 5,
		layer: MyApp.layer
	}
	);

	MyApp.layer.addOverlay(MyApp.last_point_markers);

	MyApp.tooltips = MyApp.layer.createTooltipsArray(
	{
		z_index: 6,
		layer: MyApp.layer
	}
	);

	MyApp.layer.addOverlay(MyApp.tooltips);


	var elem;
	if (document.getElementById &&(elem=document.getElementById('map'))) {
		if (elem.style) {
			elem.style.cursor='default';
		}
	}

	var google_map = new google.maps.Map(document.createElement('div'), {
		mapTypeId: google.maps.MapTypeId.ROADMAP
	});

	var geocoder = new google.maps.places.PlacesService(google_map);

	MyApp.geocoder = geocoder;


	// Initialise the FeatureGroup to store editable layers
	//var drawnItems = new L.FeatureGroup();
	//map.addLayer(drawnItems);

	// Initialise the draw control and pass it the FeatureGroup of editable layers
	//var drawControl = new L.Control.Draw({
	//edit: {
	//	featureGroup: drawnItems
	//}
	//});
	//map.addControl(drawControl);
	},

	onMapResize: function(component, width, height, oldWidth, oldHeight, eOpts) {
		MyApp.map.invalidateSize();
	},

	onMapResize1: function(component, width, height, oldWidth, oldHeight, eOpts) {
		MyApp.map.invalidateSize(false);
	},

	onPanelAfterRender: function(component, eOpts) {

	},

	onButtonAfterRender: function(component, eOpts) {
		component.sat = false;
	},

	onButtonClick4: function(button, e, eOpts) {
		MyApp.map.removeLayer(MyApp.osm_layer);
		MyApp.map.removeLayer(MyApp.sat_layer);

		if (button.sat) {
			button.sat = false;
			button.setText('Спутник');
			MyApp.map.addLayer(MyApp.osm_layer, true);
		}
		else {
			button.sat = true;
			button.setText('Карта');
			MyApp.map.addLayer(MyApp.sat_layer, true);
		}

	},

	onButtonClick5: function(button, e, eOpts) {
		if (typeof MyApp.distance != 'undefined') {
			button.setText('Измерить расстояние');
			MyApp.map.removeLayer(MyApp.distance);
			delete MyApp.distance;
		}
		else {
			MyApp.distance = L.distance();
			MyApp.map.addLayer(MyApp.distance);
			button.setText('Закончить измерение');
		}
	},

	onMap_tabActivate: function(component, eOpts) {
		if (MyApp.map_was_rendered) {

			var sl = MyApp.selectedList;
			var vl = MyApp.visibleList;
			var dl = [];
			var i;
			var record;

			this.removeAllOverlays();

			vl.length = 0;

			for (i = sl.length; i--;) {

				record = sl[i];
				vl.push(record);

				var terminal = record.terminal;

				if ((typeof terminal != 'object')||(terminal.this_period_loaded !== true)) {
					dl.push(record);
				}
				else {
					terminal.createOverlays(MyApp.visible_time_begin, MyApp.visible_time_end, MyApp.pack_parks, MyApp.trackMode);
				}
			}

			this.createAllOverlays();

			this.updateProperties();
			this.updateFuelChart();

			if (dl.length > 0) {
				this.loadHistory(dl);
			}
		}

		MyApp.map_was_rendered = true;
	},

	onMap_tabDeactivate: function(component, eOpts) {

	},

	onMultisliderChangeComplete: function(slider, newValue, thumb, eOpts) {
		var values = slider.getValues();

		MyApp.visible_time_begin	= values[0];
		MyApp.visible_time_end		= values[1];

		slider.up('window').changeTrackMode(MyApp.trackMode);
	},

	onComboboxAfterRender: function(component, eOpts) {
		component.select(1);
	},

	onDatefieldAfterRender: function(component, eOpts) {
		var date = new Date();

		date.setHours(0);
		date.setMinutes(0);
		date.setSeconds(0);
		component.setValue(date);

		component.old_value = date;
	},

	onT_fromSelect: function(field, value, eOpts) {
		value.setHours(field.old_value.getHours());
		value.setMinutes(field.old_value.getMinutes());
		value.setSeconds(field.old_value.getSeconds());

		field.setValue(value);
	},

	onT_fromValidityChange: function(field, isValid, eOpts) {
		if (isValid) {
			field.old_value = field.getValue();
		}
	},

	onDatefieldAfterRender1: function(component, eOpts) {
		var date = new Date();

		date.setHours(23);
		date.setMinutes(59);
		date.setSeconds(59);
		component.setValue(date);

		component.old_value = date;
	},

	onT_toSelect: function(field, value, eOpts) {
		value.setHours(field.old_value.getHours());
		value.setMinutes(field.old_value.getMinutes());
		value.setSeconds(field.old_value.getSeconds());

		field.setValue(value);
	},

	onT_toValidityChange: function(field, isValid, eOpts) {
		if (isValid) {
			field.old_value = field.getValue();
		}
	},

	onButtonClick: function(button, e, eOpts) {
		var self = this;

		var tab = button.up('panel');
		tab.removeAll(true);

		var devices = [];
		var reports = [];

		var tree = button.up('window').down('treepanel');

		var checkedDevices = tree.getChecked();

		var key;
		var record;

		for (key in checkedDevices) {

			record = checkedDevices[key];

			if (record.raw.type >= 1000) {
				devices.push(record);
			}
		}

		var selectedDevices = tree.getSelectionModel().getSelection();

		for (key in selectedDevices) {

			record = selectedDevices[key];

			if ((record.get('checked') === false)&&(record.raw.type >= 1000)) {
				devices.push(record);
			}
		}


		if (devices.length === 0) {
			return;
		}

		var toolbar		= button.up('toolbar');
		var report_id	= toolbar.down('#report_id').getValue();
		var t_from		= toolbar.down('#t_from').getValue() / 1000;
		var t_to		= toolbar.down('#t_to').getValue() / 1000;
		var device_no	= 0;

		var report = {
			id: report_id,
			t_from: t_from,
			t_to: t_to,
			responses: []
		};

		function get_report() {

			var mask = Ext.getBody().mask('Загрузка данных [' + (device_no + 1) + ' из ' + devices.length + ']', 'Загрузка');
			mask.setStyle('z-index', Ext.WindowMgr.zseed + 1000);

			var id		= report_id;
			var record	= devices[device_no];
			var caps	= record.raw.caps;
			var sensors = record.raw.sensors;
			var i;

			if (id == 15) {
				id = 2;
			}

			if (report_id == 3) {
				if (!caps.ignition) {
					for (i = 1; i <= 8; i++) {
						if (sensors['discrete' + i + '_type'] == 1) {
							id = 7 + i - 1;
							break;
						}
					}
					if (i == 9) {
						if (device_no < devices.length - 1) {
							device_no++;
							get_report();
							return;
						}
					}
				}
			}
			else
			if (report_id == 4) {
				if (!caps.engine) {
					for (i = 1; i <= 8; i++) {
						if (sensors['discrete' + i + '_type'] == 2) {
							id = 7 + i - 1;
							break;
						}
					}
					if (i == 9) {
						if (caps.ignition) {
							id = 3;
						}
						else {
							for (i = 1; i <= 8; i++) {
								if (sensors['discrete' + i + '_type'] == 1) {
									id = 7 + i - 1;
									break;
								}
							}
							if (i == 9) {
								if (device_no < devices.length - 1) {
									device_no++;
									get_report();
									return;
								}
							}
						}
					}
				}
			}
			else
			if (report_id == 5) {
				if (!caps.move) {
					for (i = 1; i <= 8; i++) {
						if (sensors['discrete' + i + '_type'] == 3) {
							id = 7 + i - 1;
							break;
						}
					}
					if (i == 9) {
						if (caps.engine) {
							id = 4;
						}
						else {
							for (i = 1; i <= 8; i++) {
								if (sensors['discrete' + i + '_type'] == 2) {
									id = 7 + i - 1;
									break;
								}
							}
							if (i == 9) {
								if (caps.ignition) {
									id = 3;
								}
								else {
									for (i = 1; i <= 8; i++) {
										if (sensors['discrete' + i + '_type'] == 1) {
											id = 7 + i - 1;
											break;
										}
									}

									if (i == 9) {
										if (device_no < devices.length - 1) {
											device_no++;
											get_report();
											return;
										}
									}
								}
							}
						}
					}
				}
			}

			Ext.Ajax.request({
				url: '/report/'+ id +'/'+(record.getId())+'/'+t_from+'/'+t_to+'.json',
				scope:this,
				headers : { Authorization : MyApp.AuthString },

				success: function(response, options){

					Ext.getBody().unmask();

					var r = Ext.decode(response.responseText);

					if (r.success) {
						report.responses.push( {
							record: devices[device_no],
							data: r.object
						});
					}

					if (device_no < devices.length - 1) {

						device_no++;
						get_report();
					}
					else {
						switch (report_id) {
							case 1:
							self.reportMileage(report);
							break;
							case 2:
							self.reportFuel(report);
							break;
							case 3:
							case 4:
							case 5:
							self.reportFlag(report);
							break;
							case 6:
							self.reportParksWithEngine(report);
							break;
							case 7:
							case 8:
							case 9:
							case 10:
							case 11:
							case 12:
							case 13:
							case 14:
							self.reportFlag(report);
							break;
							case 15:
							self.reportFuelTable(report);
							break;
							case 16:
							self.reportActivity(report);
							break;
						}
					}

				},

				failure: function(response, options){

					Ext.getBody().unmask();

					var statusCode = response.status;
					var statusText = response.statusText;

					Ext.MessageBox.show({
						title: 'Ошибка',
						msg: statusText + '[' + statusCode + ']',
						buttons: Ext.MessageBox.OK,
						icon: Ext.MessageBox.ERROR
					});

					if (device_no < devices.length - 1) {

						device_no++;
						get_report();
					}
				},
				timeout: 60000
			});
		}

		get_report();
	},

	onButtonClick3: function(button, e, eOpts) {
		if (typeof MyApp.pdf_report != 'object') {
			return;
		}

		var tab = this.down('#reports_tab');

		tab.removeAll();

		MyApp.pdf_report.landscape = false;

		tab.add( Ext.create("Ext.pdf.Panel", {
			border: false,
			header: false,
			json: MyApp.pdf_report
		}));		

	},

	onPdf_button_horzClick: function(button, e, eOpts) {
		if (typeof MyApp.pdf_report != 'object') {
			return;
		}

		var tab = this.down('#reports_tab');

		tab.removeAll();

		MyApp.pdf_report.landscape = true;

		tab.add( Ext.create("Ext.pdf.Panel", {
			border: false,
			header: false,
			json: MyApp.pdf_report
		}));		

	},

	onReports_tabActivate: function(component, eOpts) {
		component.down('#pdf_button_vert').setVisible(typeof MyApp.pdf_report == 'object');
		component.down('#pdf_button_horz').setVisible(typeof MyApp.pdf_report == 'object');
	},

	onReports_tabDeactivate: function(component, eOpts) {

	},

	onCharts_tabActivate: function(component, eOpts) {
		var record = MyApp.selectedRecord;

		if ((typeof record == 'object')&&(record.raw.type >= 1000)) {
			if ((typeof MyApp.chartsData != 'object')||(MyApp.chartsData.record != record)) {
				this.createCharts(record);
			}
		}
		else {
			component.removeAll();
		}
	},

	onButtonClick1: function(button, e, eOpts) {
		var window = Ext.create('MyApp.view.ChannelsWindow');

		window.addListener('close', 
		function() {
			if (MyApp.activeDevice) {
				this.createCharts(MyApp.activeDevice);
			}
		},
		this);

		window.show();
	},

	onIgnition_checkboxChange: function(field, newValue, oldValue, eOpts) {
		var record = MyApp.activeDevice;

		if (record) {

			var caps			= record.raw.caps;
			var sensors			= record.raw.sensors;
			var history_data	= record.history_data || {};

			var filter_data;
			var filter_bit;

			var i;

			if (newValue) {
				if (caps.ignition) {
					filter_data = history_data.flags1;
					filter_bit = 0x80;
				}
				else {

					var bit = [0x80, 0x40, 0x20, 0x10, 0x08];

					for (i = 1; i <= 5; i++) {

						if ((caps['discrete' + i])&&(sensors['discrete' + i + '_type'] == 1)) {
							filter_data = history_data.flags2;
							filter_bit = bit[i - 1];
						}
					}
				}
			}

			var charts = MyApp.charts;

			for (i = charts.length; i--;) {
				charts[i].applyFilter(filter_data, filter_bit);
			}
		}
	},

	onCharts_tabDeactivate: function(component, eOpts) {

	},

	onPanelActivate: function(component, eOpts) {
		var record = MyApp.selectedRecord;

		if ((typeof record == 'object')&&(record.raw.type >= 1000)) {
			this.createJournal(record, (typeof MyApp.tableData == 'object')&&(MyApp.tableData.record == record));

		}
		else {
			component.down('panel').down('#journal').getStore().removeAll();
			component.down('panel').setTitle('');
		}
	},

	onPanelDeactivate: function(component, eOpts) {

	},

	onJournalItemDblClick: function(dataview, record, item, index, e, eOpts) {
		if (record.get('lat') && record.get('lng')) {
			Ext.getCmp('tab').setActiveTab(0);
			MyApp.map.setView([record.get('lat'), record.get('lng')], 17);
			var popup = L.popup().setLatLng([record.get('lat'), record.get('lng')]).setContent(record.get('event')).openOn(MyApp.map);	
		}
	},

	onTable_tabActivate: function(component, eOpts) {
		var record = MyApp.selectedRecord;

		if ((typeof record == 'object')&&(record.raw.type >= 1000)) {
			this.createTable(record, (typeof MyApp.tableData == 'object')&&(MyApp.tableData.record == record));
		}
		else {
			component.down('panel').down('#table').getStore().removeAll();
			component.down('panel').setTitle('');
		}
	},

	onTable_tabDeactivate: function(component, eOpts) {

	},

	onButtonClick2: function(button, e, eOpts) {
		var window = Ext.create('MyApp.view.ChannelsWindow');

		window.addListener('close', 
		function() {
			if (MyApp.selectedRecord) {
				this.createTable(MyApp.selectedRecord);
			}
		},
		this);

		window.show();
	},

	onIgnition_checkboxChange1: function(field, newValue, oldValue, eOpts) {
		if (MyApp.selectedRecord) {
			this.createTable(MyApp.selectedRecord);
		}
	},

	onTable_gridItemDblClick: function(dataview, record, item, index, e, eOpts) {

	},

	onCellEditingEdit: function(editor, e, eOpts) {
		var fuel_value = e.value;
		var field;
		var factor = 1;
		var sensor_value;
		var record	= MyApp.selectedRecord;

		if ((e.column.dataIndex == 'speed')&&(e.value != -1)) {
			e.record.commit();
			return;
		}

		if (e.originalValue.toFixed(2) != e.value) {

			var time	= e.record.get('t');

			if (e.column.dataIndex == 'speed') {
				field = 'speed';
				sensor_value = 0;
			}
			else {

				var lls		= e.column.dataIndex == 'lls_left' ? 2 : 3;
				var sensors	= record.raw.sensors;
				var caps	= record.raw.caps;
				var table	= (lls == 2) ? record.raw.llsleft.table : record.raw.llsright.table;

				if ((typeof sensors == 'object')&&(typeof caps == 'object')&&(table.length > 1)) {

					var k;

					for (k = 1; k <= 8; k++) {

						if ((caps['frequency' + k])&&(sensors['frequency' + k + '_type'] == lls)) {

							field = 'frequency' + k;
							factor = 10;

							break;
						}
					}

					if (k == 9) {

						for (k = 1; k <= 8; k++) {

							if ((caps['analog' + k])&&(sensors['analog' + k + '_type'] == lls)) {

								field = 'analog' + k;
								factor = 1000;

								break;
							}
						}
					}

					if (k == 9) {
						return;
					}

					table.sort(function(a, b){
						if (a.fuel_value < b.fuel_value) return -1;
						if (a.fuel_value > b.fuel_value) return 1;
						return 0;
					});	

					if (fuel_value <= table[0].fuel_value) {
						sensor_value = table[0].sensor_value;
					}
					else {
						if (fuel_value >= table[table.length - 1].fuel_value) {
							sensor_value = table[table.length - 1].sensor_value;
						}
						else {
							for (var i = 1; i < table.length; i++) {
								if ((fuel_value >= table[i - 1].fuel_value)&&(fuel_value < table[i].fuel_value)) {

									k = (table[i].sensor_value - table[i - 1].sensor_value) / (table[i].fuel_value - table[i - 1].fuel_value);
									sensor_value = table[i - 1].sensor_value + (fuel_value - table[i - 1].fuel_value) * k;

									break;
								}
							}
						}
					}

					table.sort(function(a, b){
						if (a.sensor_value < b.sensor_value) return -1;
						if (a.sensor_value > b.sensor_value) return 1;
						return 0;
					});	
				}
			}

			var mask = Ext.getBody().mask('Сохранение данных', 'Сохранение');
			mask.setStyle('z-index', Ext.WindowMgr.zseed + 1000);

			Ext.Ajax.request({

				url:		'/objects/' + record.getId() + '/modify',
				scope:		this,
				headers:	{ Authorization : MyApp.AuthString },
				method:		'POST',
				jsonData:	{ field: field, value: sensor_value * factor, time: time },

				success: function(response, options){

					e.record.commit();
					Ext.getBody().unmask();

				},

				failure: function(response, options){

					Ext.getBody().unmask();

					var statusCode = response.status;
					var statusText = response.statusText;

					Ext.MessageBox.show({
						title: 'Ошибка',
						msg: statusText + '[' + statusCode + ']',
						buttons: Ext.MessageBox.OK,
						icon: Ext.MessageBox.ERROR
					});
				},
				timeout: 60000
			});
		}
		else {
			e.record.commit();
		}
	},

	onTable_gridCellDblClick: function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts) {
		if (MyApp.tableData.columns[cellIndex].editor) {
			return;
		}

		if (record.get('lat') && record.get('lng')) {
			Ext.getCmp('tab').setActiveTab(0);
			MyApp.map.setView([record.get('lat'), record.get('lng')], 17);
			var popup = L.popup().setLatLng([record.get('lat'), record.get('lng')]).setContent(record.get('time')).openOn(MyApp.map);		
		}
	},

	onInfo_tabActivate: function(component, eOpts) {
		var record = MyApp.selectedRecord;

		if ((typeof record == 'object')&&(record.raw.type >= 1000)) {
			this.createInfo(record);
		}

	},

	onButtonClick6: function(button, e, eOpts) {
		var group = button.up('fieldset');
		var form = group.up('form').getForm();
		/*
		form.submit({
		url: 'file-upload.php',
		waitMsg: 'Uploading your photo...',
		success: function(fp, o) {
		}
		});
		*/           

		var record = MyApp.selectedRecord;

		if (typeof record == 'object') {

			var name	= group.down('#name').getValue();
			var info	= group.down('#info').getValue();
			var color	= group.down('#color').picker.getValue();

			var custom	=  { info: info, color: color } ;

			var mask = Ext.getBody().mask('Сохранение данных', 'Сохранение');
			mask.setStyle('z-index', Ext.WindowMgr.zseed + 1000);

			Ext.Ajax.request({
				url: '/objects/' + record.getId(),
				method: 'POST',
				scope: this,
				headers : { Authorization : MyApp.AuthString },
				jsonData: {
					type: record.raw.type,
					dev_id: record.raw.dev_id,
					name: name,
					phone: record.raw.phone,
					retranslator: record.raw.retranslator,
					custom: Ext.encode( custom ),
					color: color
				},

				success: function(response, options){

					Ext.getBody().unmask();

					var r = Ext.decode(response.responseText);

					if (r.success) {

						record.set('text', name);
						record.raw.name = name;

						record.save();

						record.raw.custom = custom;

						this.removeOverlays(record.terminal);
						this.createOverlays(record.terminal);
					}
					else {
						Ext.MessageBox.show({
							title: 'Ошибка',
							msg: r.message,
							buttons: Ext.MessageBox.OK,
							icon: Ext.MessageBox.ERROR
						});
					}
				},

				failure: function(response, options){

					Ext.getBody().unmask();

					var statusCode = response.status;
					var statusText = response.statusText;

					Ext.MessageBox.show({
						title: 'Ошибка',
						msg: statusText + '[' + statusCode + ']',
						buttons: Ext.MessageBox.OK,
						icon: Ext.MessageBox.ERROR
					});
				},
				timeout: 60000
			});
		}
	},

	onList_tabActivate: function(component, eOpts) {
		this.createList();
	},

	onMainWindowAfterRender: function(component, eOpts) {
		this.loadChannels();

		var date = new Date();

		date.setHours(0);
		date.setMinutes(0);
		date.setSeconds(0);

		MyApp.t_from = Math.floor(date.getTime() / 1000);

		date.setHours(23);
		date.setMinutes(59);
		date.setSeconds(59);

		MyApp.t_to = Math.floor(date.getTime() / 1000);

		component.down('multislider').setMinValue(MyApp.t_from);
		component.down('multislider').setMaxValue(MyApp.t_to);
		component.down('multislider').setValue(0, MyApp.t_from);
		component.down('multislider').setValue(1, MyApp.t_to);

		MyApp.time_source = 1;

		var sl = [];
		var vl = [];

		MyApp.tooltips.beginUpdate();

		var min_lat	= 90;
		var max_lat	= -90;
		var min_lng	= 180;
		var max_lng	= -180;

		this.down('#tree').getRootNode().cascadeBy( 

		function(n) {

			if (n.raw.type >= 1000) {

				if (n.get('checked')) {

					var terminal = n.terminal;
					var nav = terminal.nav;

					if (typeof nav == 'object') {

						terminal.tooltip = {

							lat:		nav.lat,
							lng:		nav.lng,

							popup_text:	function() { return '<b>' + terminal.title + '</b><br>' + 'Скорость: ' + nav.speed + ' км/ч<br>Время: ' + terminal.beauty_time(nav.time) },

							color:		terminal.color ? terminal.color : 'FF0000',
							text:		terminal.title
						};

						MyApp.tooltips.addTooltip(terminal.tooltip);

						if (nav.lat < min_lat) {
							min_lat = nav.lat;
						}
						if (nav.lat > max_lat) {
							max_lat = nav.lat;
						}
						if (nav.lng < min_lng) {
							min_lng = nav.lng;
						}
						if (nav.lng > max_lng) {
							max_lng = nav.lng;
						}
					}

					sl.push(n);
					vl.push(n);
				}
			}
		}
		);

		MyApp.tooltips.endUpdate();

		if (vl.length !== 0) {

			MyApp.map.fitBounds([ [ max_lat, min_lng] , [ min_lat, max_lng] ], {
				animate: false
			});
		}

		MyApp.selectedList	= sl;
		MyApp.visibleList	= vl;

		MyApp.onlineMergeEnabled = true;
		MyApp.pack_parks = true;
		MyApp.show_labels = true;

		this.startOneSecTimer();
		this.updateFuelChart();
		this.updateProperties();


	},

	onMainWindowClose: function(panel, eOpts) {
		Ext.create('MyApp.view.loginWindow').show();
	},

	loadHistory: function(dl) {
		var prev_onlineMerge = MyApp.onlineMergeEnabled;

		MyApp.onlineMergeEnabled = false;
		MyApp.cancelOnlineMerge = true;

		if (dl.length > 0) {

			var self	= this;

			var active_tab_id = self.down('tabpanel').getActiveTab().itemId;

			var index	= 0;
			var min_lat	= 90;
			var max_lat	= -90;
			var min_lng	= 180;
			var max_lng	= -180;

			function callback(terminal, pointsCount) {

				if (typeof terminal == 'object') {

					if (terminal.points_count === 0) {
						Ext.create('widget.uxNotification', {
							title: 'Уведомление',
							position: 't',
							manager: 'demo1',
							iconCls: 'ux-notification-icon-information',
							autoCloseDelay: 3000,
							spacing: 20,
							html: '<b>' + terminal.title + '</b> - Нет данных'
						}).show();
					}
					else {
						if (terminal.nav_points_count === 0) {
							Ext.create('widget.uxNotification', {
								title: 'Уведомление',
								position: 't',
								manager: 'demo1',
								iconCls: 'ux-notification-icon-information',
								autoCloseDelay: 3000,
								spacing: 20,
								html: '<b>' + terminal.title + '</b> - Нет трека'
							}).show();
						}
					}


					if (active_tab_id == 'map_tab') {

						self.removeOverlays(terminal);
						terminal.createOverlays(MyApp.visible_time_begin, MyApp.visible_time_end, MyApp.pack_parks, MyApp.trackMode);
						self.createOverlays(terminal);

						if (terminal.min_lat < min_lat) {
							min_lat = terminal.min_lat;	
						}

						if (terminal.max_lat > max_lat) {
							max_lat = terminal.max_lat;		
						}

						if (terminal.min_lng < min_lng) {
							min_lng = terminal.min_lng;	
						}

						if (terminal.max_lng > max_lng) {
							max_lng = terminal.max_lng;	
						}
					}

					if (dl[index - 1] == MyApp.selectedRecord) {

						if (active_tab_id == 'table_tab') {
							self.createTable(MyApp.selectedRecord);
						}
						if (active_tab_id == 'journal_tab') {
							self.createJournal(MyApp.selectedRecord);
						}
						if (active_tab_id == 'charts_tab') {
							self.createCharts(MyApp.selectedRecord);
						}
					}

					terminal.this_period_loaded = true;			
				}

				if (index < dl.length) {

					var mask = Ext.getBody().mask('Загрузка данных [' + (index + 1) + ' из ' + dl.length + ']', 'Загрузка');
					mask.setStyle('z-index', Ext.WindowMgr.zseed + 1000);

					dl[index].terminal.mergeHistory(MyApp.t_from, MyApp.t_to, callback);

					index++;
				}
				else {

					if (active_tab_id == 'map_tab') {

						MyApp.park_markers.endUpdate();
						MyApp.tooltips.endUpdate();

						self.updateProperties();
						self.updateFuelChart();

						if (min_lat != 90) {
							MyApp.map.fitBounds([ [ max_lat, min_lng] , [ min_lat, max_lng] ], {
								animate: false
							});
						}
					}

					Ext.getBody().unmask();

					MyApp.onlineMergeEnabled = prev_onlineMerge;
					MyApp.cancelOnlineMerge = false;
					MyApp.onlineTimer = 60;
				}
			}

			if (active_tab_id == 'map_tab') {
				MyApp.park_markers.beginUpdate();
				MyApp.tooltips.beginUpdate();
			}

			callback();	
		}
	},

	mergeHistory: function(dl, onDone, onCancel) {
		MyApp.cancelOnlineMerge = false;

		if (dl.length > 0) {

			var self	= this;
			var index	= 0;
			var vl		= MyApp.visibleList;

			function callback(terminal, pointsCount) {

				if (MyApp.cancelOnlineMerge) {

					if (onCancel) {
						onCancel();
					}

					return;
				}

				var tab	= self.down('tabpanel');

				if ((typeof terminal == 'object')&&(vl.indexOf(dl[index - 1]) != -1)&&(pointsCount > 0)&&(tab.getActiveTab().itemId == 'map_tab')) {

					console.log(pointsCount + ' ' + dl[index - 1].get('text'));

					MyApp.tooltips.beginUpdate();
					MyApp.park_markers.beginUpdate();

					self.removeOverlays(terminal);
					terminal.createOverlays(MyApp.visible_time_begin, MyApp.visible_time_end, MyApp.pack_parks, MyApp.trackMode);
					self.createOverlays(terminal);

					MyApp.tooltips.endUpdate();
					MyApp.park_markers.endUpdate();

					if (dl[index - 1] == MyApp.selectedRecord) {
						self.updateProperties();
						self.updateFuelChart();
					}
				}

				if (dl[index - 1] == MyApp.selectedRecord) {

					if (tab.getActiveTab().itemId == 'table_tab') {
						self.createTable(MyApp.selectedRecord, true);
					}
					if (tab.getActiveTab().itemId == 'journal_tab') {
						self.createJournal(MyApp.selectedRecord, true);
					}
				}

				if (index < dl.length) {

					var from = (dl[index].terminal.last_record_time !== 0) ? (dl[index].terminal.last_record_time) : MyApp.t_from;

					dl[index].terminal.mergeHistory(from, 0xFFFFFFFF, callback);

					index++;
				}
				else {

					if (onDone) {
						onDone();
					}
				}	
			}

			callback();	
		}
	},

	startOneSecTimer: function() {
		var self = this;

		var map_button		= this.down('#map_update');
		var table_button	= this.down('#table_update');
		var active_tab		= this.down('tabpanel').getActiveTab();
		var active_tab_id	= active_tab.itemId;

		MyApp.onlineTimer = 60;

		function oneSecTimerHandler() {

			if ((MyApp.onlineMergeEnabled)&&(MyApp.onlineTimer !== 0)) {

				MyApp.onlineTimer--;

				map_button.setText('Обновить (' + MyApp.onlineTimer + ')');
				table_button.setText('Обновить (' + MyApp.onlineTimer + ')');

				if (MyApp.onlineTimer === 0) {

					if (active_tab_id == 'map_tab') {

						var vl = MyApp.visibleList;

						if (vl.length > 0) {

							map_button.disable();
							table_button.disable();

							var dl = [];

							for (var i = vl.length; i--;) {
								dl.push(vl[i]);
							}

							self.mergeHistory(dl, 
							function() {
								MyApp.onlineTimer = 60;
								map_button.enable();
								table_button.enable();
							},
							function() {
								MyApp.onlineTimer = 60;
								map_button.enable();
								table_button.enable();
							}				 
							);
						}
					}
					else
					if ((active_tab_id == 'journal_tab')||(active_tab_id == 'table_tab')) {

						if ((typeof MyApp.selectedRecord == 'object')&&(MyApp.selectedRecord.raw.type >= 1000)) {

							map_button.disable();
							table_button.disable();

							self.mergeHistory(dl, 
							function() {
								MyApp.onlineTimer = 60;
								map_button.enable();
								table_button.enable();
							},
							function() {
								MyApp.onlineTimer = 60;
								map_button.enable();
								table_button.enable();
							}				 
							);
						}
					}
				}
			}

			setTimeout(oneSecTimerHandler, 1000);
		}

		setTimeout(oneSecTimerHandler, 1000);

	},

	createOverlays: function(terminal) {
		var markers = [];

		console.log(terminal);

		if (terminal.track_points_count > 0) {

			terminal.polyline = MyApp.layer.createPolyline({

				layer: MyApp.layer,

				lat: terminal.track_lat,
				lng: terminal.track_lng,
				count: terminal.track_points_count,

				z_index: 1,
				width: 4,

				color: terminal.color ? terminal.color : 'FF0000',

				line_popup_text: terminal.title,

				sprite_popup_text: function(index) { return terminal.getPointTooltip(index); }
			});

			MyApp.layer.addOverlay(terminal.polyline);

			if (MyApp.show_labels === true) {

				terminal.tooltip = {
					lat: terminal.track_lat[terminal.track_points_count - 1],
					lng: terminal.track_lng[terminal.track_points_count - 1],
					popup_text: function() { return terminal.getLastPointTooltip(); },
					color: terminal.color ? terminal.color : 'FF0000',
					text: terminal.title
				};

				MyApp.tooltips.addTooltip(terminal.tooltip);	
			}
			else {
				delete terminal.tooltip;
			}

			var park_markers = MyApp.park_markers;

			for (var i = 0; i < terminal.parks_points_count; i++) {

				var marker = {
					lat: terminal.park_lat[i],
					lng: terminal.park_lng[i],
					cog: 0,
					popup_text: function(index) { return terminal.getParkTooltip(index); },
					index: i
				};

				markers.push(marker);

				park_markers.addMarker(marker);
			}

			if (1) {

				terminal.marker = {
					lat: terminal.track_lat[terminal.track_points_count - 1],
					lng: terminal.track_lng[terminal.track_points_count - 1],
					popup_text: function() { return terminal.getLastPointTooltip(); },
					text: terminal.title,
					cog: terminal.cog + 90
				};

				MyApp.last_point_markers.addMarker(terminal.marker);	
			}
			else {
				delete terminal.marker;
			}

		}

		terminal.markers = markers;
	},

	createAllOverlays: function() {
		MyApp.tooltips.beginUpdate();
		MyApp.park_markers.beginUpdate();
		MyApp.last_point_markers.beginUpdate();

		var vl = MyApp.visibleList;

		for (var i = vl.length; i--;) {
			this.createOverlays(vl[i].terminal);
		}

		MyApp.last_point_markers.endUpdate();
		MyApp.tooltips.endUpdate();
		MyApp.park_markers.endUpdate();

	},

	removeOverlays: function(terminal) {
		var park_markers = MyApp.park_markers;

		MyApp.layer.removeOverlay(terminal.polyline);

		if (typeof terminal.tooltip == 'object') {
			MyApp.tooltips.removeTooltip(terminal.tooltip);
			delete terminal.tooltip;
		}

		if (typeof terminal.marker == 'object') {
			MyApp.last_point_markers.removeMarker(terminal.marker);
			delete terminal.marker;
		}

		var markers = terminal.markers;

		for (k = markers.length; k--;) {
			park_markers.removeMarker(markers[k]);
		}

		terminal.markers = [];
	},

	removeAllOverlays: function() {
		var layer				= MyApp.layer;
		var tooltips			= MyApp.tooltips;
		var park_markers		= MyApp.park_markers;
		var last_point_markers	= MyApp.last_point_markers;
		var vl					= MyApp.visibleList;

		var terminal;
		var markers;
		var i;
		var k;

		tooltips.removeAll();
		tooltips.beginUpdate();

		park_markers.removeAll();
		park_markers.beginUpdate();
		last_point_markers.removeAll();
		last_point_markers.beginUpdate();

		for (i = vl.length; i--;) {

			terminal = vl[i].terminal;

			layer.removeOverlay(terminal.polyline);

			if (typeof terminal.tooltip == 'object') {
				tooltips.removeTooltip(terminal.tooltip);
				delete terminal.tooltip;
			}

			if (typeof terminal.marker == 'object') {
				last_point_markers.removeMarker(terminal.marker);
				delete terminal.marker;
			}

			markers = terminal.markers;

			for (k = markers.length; k--;) {
				park_markers.removeMarker(markers[k]);
			}

			terminal.markers = [];
		}
		last_point_markers.endUpdate();
		park_markers.endUpdate();

		tooltips.endUpdate();

	},

	updateFuelChart: function() {
		var tab		= this.down('#chart_tab');
		var record	= MyApp.selectedRecord;

		if ((typeof record != 'object')||(typeof record.terminal != 'object')||(record.terminal.has_lls !== true))
		{
			tab.hide();
			return;
		}

		var terminal = record.terminal;

		var chart = Ext.create('Ext.chart.Panel', {

			x_data: terminal.arr_time,
			y_data: terminal.arr_total_fuel,

			mask_data: terminal.arr_total_fuel_mask,
			mask_bit: 1,

			binary: false,
			border: false,

			view_start: MyApp.t_from,
			view_end: MyApp.t_to,
			factor: 1.0,

			closable: false,

			listeners: {
				click: {
					fn: this.onChartClick,
					scope: this
				}
			}
		});

		tab.removeAll();
		tab.add(chart);
		tab.show();

	},

	updateProperties: function() {
		if ((typeof MyApp.selectedRecord != 'object')||(typeof MyApp.selectedRecord.terminal != 'object'))
		{
			this.down('#props_panel').hide();
			return;
		}

		var terminal = MyApp.selectedRecord.terminal;

		terminal.updateInfo();

		console.log('create props');

		this.down('#props_panel').show();

		var props = this.down('#props');

		var move_hours = Math.floor(terminal.work_time / 3600);
		var move_minutes = Math.floor((terminal.work_time - move_hours * 3600) / 60);

		if (move_hours <= 9) {
			move_hours = '0' + move_hours;
		}

		if (move_minutes <= 9) {
			move_minutes = '0' + move_minutes;
		}

		props.down('#propName').setValue(terminal.title);

		props.down('#propLink').setValue( (terminal.link === true) ? 'На связи' : ((terminal.mode == 0) ? 'Нет связи' : ((terminal.mode == 1) ? 'Ждущий режим' : 'Спящий режим')));
		props.down('#propNav').setValue( (terminal.nav_valid) ? 'Принято' : 'Не принято');

		props.down('#propIgn').setValue( (terminal.ignition) ? 'Включено' : 'Выключено');
		props.down('#propEng').setValue( (terminal.engine) ? 'Заведен' : 'Заглушен');
		props.down('#propMov').setValue( (terminal.move) ? 'Движение' : 'Стоянка');

		props.down('#propMil').setValue((terminal.mileage / 1000).toFixed(2) + ' км');

		props.down('#propTim').setValue(move_hours + 'ч ' + move_minutes + 'м');

		if ((terminal.max_speed_lat !== 0)&&(terminal.max_speed_lng !== 0)) {
			props.down('#propSpeed').setValue('<a href="#" onclick="MyApp.map.setView([' + terminal.max_speed_lat + ',' +terminal.max_speed_lng + '], 16);return false;">' + (terminal.max_speed / 10) + ' км/ч</a>');
		}
		else {
			props.down('#propSpeed').setValue( (terminal.max_speed / 10) + ' км/ч');
		}

		if (terminal.start_work !== 0) {

			if ((terminal.work_start_lat !== 0)&&(terminal.work_start_lng !== 0)) {
				props.down('#propStart').setValue('<a href="#" onclick="MyApp.map.setView([' + terminal.work_start_lat + ',' +terminal.work_start_lng + '], 16);return false;">' + terminal.beauty_time(terminal.start_work) + '</a>');
			}
			else {
				props.down('#propStart').setValue(terminal.beauty_time(terminal.start_work));
			}

			if ((terminal.work_end_lat !== 0)&&(terminal.work_end_lng !== 0)) {
				props.down('#propEnd').setValue('<a href="#" onclick="MyApp.map.setView([' + terminal.work_end_lat + ',' +terminal.work_end_lng + '], 16);return false;">' + terminal.beauty_time(terminal.end_work) + '</a>');
			}
			else {
				props.down('#propEnd').setValue(terminal.beauty_time(terminal.end_work));
			}
		}
		else {
			props.down('#propStart').setValue('Не работал');
			props.down('#propEnd').setValue('Не работал');
		}


		props.down('#propEngStart').setValue(terminal.engine_launch_count);

		props.down('#propFuelStart').setValue(terminal.fuel_start.toFixed(2) + ' л');
		props.down('#propFuelEnd').setValue(terminal.fuel_end.toFixed(2) + ' л');
	},

	changeTrackMode: function(mode) {
		MyApp.trackMode = mode;

		this.removeAllOverlays();

		var vl = MyApp.visibleList;

		for (var i = vl.length; i--;) {

			vl[i].terminal.createOverlays(MyApp.visible_time_begin, MyApp.visible_time_end, MyApp.pack_parks, mode);
		}

		this.createAllOverlays();
	},

	createJournal: function(record, merge) {
		var i, k;
		var terminal = record.terminal;
		var data = [];

		if ((typeof MyApp.journalData != 'object')||(MyApp.journalData.record != record)) {
			merge = false;
		}

		if (merge !== true) {

			console.log('create journal ' + record.get('text'));

			var store = Ext.create('Ext.data.Store', {
				storeId:'journaltore',
				fields: [
				{
					name: 'time',
					type: 'string'
				},
				{
					name: 'event',
					type: 'string'
				},
				{
					name: 'address',
					type: 'string'
				},
				{
					name: 'lat',
					type: 'float'
				},
				{
					name: 'lng',
					type: 'float'
				},
				{
					name: 't',
					type: 'number'
				}
				],
				proxy: {
					type: 'memory',
					reader: {
						type: 'json',
						root: 'items'
					}
				},
				sorters: [{
					direction: 'DESC',
					property: 'time'
				}]
			});

			var grid = this.down('#journal');

			grid.reconfigure(store);

			grid.up('panel').setTitle(record.get('text'));

			MyApp.journalData = {
				store:			store,
				grid:			grid,
				start_point:	0,
				record:			record,
				flags1:			0,
				flags2:			0,
				bits1:			0,
				ignition:		false,
				engine:			false,
				move:			false,
			};	
		}
		else {
			console.log('merge journal ' + record.get('text'));
		}

		var f1				= MyApp.journalData.flags1;
		var f2				= MyApp.journalData.flags2;
		var b1				= MyApp.journalData.bits1;
		var start_point		= MyApp.journalData.start_point;
		var ignition		= MyApp.journalData.ignition;
		var engine			= MyApp.journalData.engine;
		var move			= MyApp.journalData.move;

		var time = terminal.arr_time;	

		if (typeof time == 'object') {

			var points_count = time.length;

			if (points_count > start_point) {

				var bits1	= terminal.arr_bits1;
				var lat		= terminal.arr_lat;
				var lng		= terminal.arr_lng;
				var events	= terminal.arr_event;
				var flags1	= terminal.arr_flags1;
				var flags2	= terminal.arr_flags2;

				var b1 = bits1[start_point];

				function add_event(i, text) {

					var item = {
						time: Ext.Date.format(new Date(time[i] * 1000), 'd.m.Y H:i:s'),
						event: text,
						address: ''
					};

					if (bits1[i] & 0x20) {
						item.lat = lat[i];
						item.lng = lng[i];
					}

					data.push(item);
				}

				for (i = start_point; i < points_count; i++) {

					var bit1 = bits1[i];

					if (bit1 & 0x80) {

						var event;

						if ((events[i] >= 3)&&(events[i] < 0x20)) {

							var e = events[i] - 3;

							if (e & 0x01) {
								add_event(i, 'Холодный старт');
							}
							if (e & 0x02) {
								add_event(i, 'Аппаратный сброс');
							}
							if (e & 0x04) {
								add_event(i, 'Программный сброс');
							}
							if (e & 0x08) {
								add_event(i, 'Сторожевой таймер');
							}
							if (e & 0x10) {
								add_event(i, 'Строжевой таймер');
							}
							if (e & 0x20) {
								add_event(i, 'Сбой питания');
							}
						}
						else {
							switch (events[i]) {
								case 1:
								event = 'Связь восстановлена';
								break;
								case 2:
								event = 'Связь потеряна';
								break;
								case 0x20:
								event = 'Начало обновления прошивки';
								break;
								case 0x23:
								event = 'Обновление прошивки завершено';
								break;
								case 0x22:
								event = 'Ошибка при обновлении прошивки';
								break;
								case 0x24:
								event = 'Профиль поврежден';
								break;
								default:
								event = 'Неизвестное событие ' + events[i];
								break;
							}
						}

						add_event(i, event);
					}

					if (bit1 & 0x40) {

						var f1_set = flags1[i] & (f1 ^ flags1[i]);
						var f1_reset = f1 & (f1 ^ flags1[i]);

						var f2_set = flags2[i] & (f2 ^ flags2[i]);
						var f2_reset = f2 & (f2 ^ flags2[i]);


						if (f2_reset & 0x04) {
							if ((flags2[i] & 0x02) === 0) {
								add_event(i, "Активный режим");
							}
						}
						if (f2_reset & 0x02) {
							if ((flags2[i] & 0x04) === 0) {
								add_event(i, "Активный режим");
							}
						}

						if ((f2_set & 0x80)&&(terminal.senDiscrete1 > 3))
						add_event(i, "Вход №1 активирован");
						if ((f2_set & 0x40)&&(terminal.senDiscrete2 > 3))
						add_event(i, "Вход №2 активирован");
						if ((f2_set & 0x20)&&(terminal.senDiscrete3 > 3))
						add_event(i, "Вход №3 активирован");
						if ((f2_set & 0x10)&&(terminal.senDiscrete4 > 3))
						add_event(i, "Вход №4 активирован");
						if ((f2_set & 0x08)&&(terminal.senDiscrete5 > 3))
						add_event(i, "Вход №5 активирован");

						if ((terminal.has_ignition)&&(terminal.ignition_mask[i] & terminal.ignition_mask_bit)) {

							var ign = (terminal.ignition_data[i] & terminal.ignition_bit) > 0;

							if (ign != ignition) {
								if (ign) {
									add_event(i, "Зажигание включено");
									ignition = true;
								}
								else {
									add_event(i, "Зажигание выключено");
									ignition = false;
								}
							}
						}

						if ((terminal.has_engine)&&(terminal.engine_mask[i] & terminal.engine_mask_bit)) {

							var eng = (terminal.engine_data[i] & terminal.engine_bit) > 0;

							if (eng != engine) {
								if (eng) {
									add_event(i, "Двигатель заведен");
									engine = true;
								}
								else {
									add_event(i, "Двигатель заглушен");
									engine = false;
								}
							}
						}

						if ((terminal.has_move)&&(terminal.move_mask[i] & terminal.move_mask_bit)) {

							var mov = (terminal.move_data[i] & terminal.move_bit) > 0;

							if (mov != move) {
								if (mov) {
									add_event(i, "Начало движения");
									move = true;
								}
								else {
									add_event(i, "Остановка");
									move = false;
								}
							}
						}

						if (f2_set & 0x04)					
						add_event(i, "Ждущий режим");
						if (f2_set & 0x02)
						add_event(i, "Спящий режим");

						if ((f2_reset & 0x80)&&(terminal.senDiscrete1 > 3))
						add_event(i, "Вход №1 не активен");
						if ((f2_reset & 0x40)&&(terminal.senDiscrete2 > 3))
						add_event(i, "Вход №2 не активен");
						if ((f2_reset & 0x20)&&(terminal.senDiscrete3 > 3))
						add_event(i, "Вход №3 не активен");
						if ((f2_reset & 0x10)&&(terminal.senDiscrete4 > 3))
						add_event(i, "Вход №4 не активен");
						if ((f2_reset & 0x08)&&(terminal.senDiscrete5 > 3))
						add_event(i, "Вход №5 не активен");

						f1 = flags1[i];
						f2 = flags2[i];

						var b1_set = bit1 & (b1 ^ bit1);
						var b1_reset = b1 & (b1 ^ bit1);

						if (b1_set & 0x20) {
							add_event(i, "Сигнал навигации принят");
						}

						if (b1_reset & 0x20) {
							add_event(i, "Сигнал навигации потерян");
						}

						b1 = bit1;
					}
				}
			}
		}

		var first_row = 0;

		if (MyApp.journalData.grid.getStore().getCount() > 0) {
			first_row = MyApp.journalData.grid.findPlugin('bufferedrenderer').getFirstVisibleRowIndex();
		}

		MyApp.journalData.store.loadData(data, true);
		MyApp.journalData.store.sort();

		if (MyApp.journalData.grid.getStore().getCount() > (first_row + 1)) {
			MyApp.journalData.grid.findPlugin('bufferedrenderer').scrollTo(first_row, false);
		}

		MyApp.journalData.flags1		= f1;
		MyApp.journalData.flags2		= f2;
		MyApp.journalData.bits1			= b1;
		MyApp.journalData.start_point	= terminal.arr_time.length;
		MyApp.journalData.ignition		= ignition;
		MyApp.journalData.engine		= engine;
		MyApp.journalData.move			= move;

	},

	createTable: function(record, merge) {
		var i, k;
		var terminal = record.terminal;
		var column;
		var columns;
		var columns_count;
		var data = [];
		var channelsStore		= Ext.data.StoreManager.lookup('ChannelsMemoryStore');
		var channelsCount		= channelsStore.getCount();

		if ((typeof MyApp.tableData != 'object')||(MyApp.tableData.record != record)) {
			merge = false;
		}

		if (merge !== true) {

			console.log('create table ' + record.get('text'));

			columns					= [{ text: 'Время',  dataIndex: 'time' }, { text: 'Событие',  dataIndex: 'event' }];

			var fields				= ['time', 'lat', 'lng', 't', 'event'];

			var filterByIgnition	= this.down('#table_tab').down('#ignition_checkbox').getValue();

			var filter_data;
			var filter_bit;

			if ((filterByIgnition)&&(terminal.has_ignition)) {
				filter_data	= terminal.ignition_data;
				filter_bit	= terminal.ignition_bit;
			}
			else {
				filter_data	= null;
				filter_bit	= null;
			}

			var name;

			for (i = 0; i < channelsCount; i++) {

				var channel = channelsStore.getAt(i);

				if ((channel.get('visible') !== false)&&(terminal[channel.get('presense_field')])) {

					name = channel.get('name');

					fields.push(name);

					column = {

						text:			channel.get('text'),
						dataIndex:		name,

						data:			terminal[channel.get('data_field')],
						data_bit:		channel.get('binary_bit'),

						mask_data:		terminal[channel.get('mask')],
						mask_bit:		channel.get('mask_bit'),

						binary:			channel.get('binary'),
						factor:			channel.get('factor'),

						filter_data:	filter_data,
						filter_bit:		filter_bit
					};

					if (typeof column.data == 'string')
					column.data = terminal[column.data];

					if (typeof column.data_bit == 'string')
					column.data_bit = terminal[column.data_bit];

					if (typeof column.mask_data == 'string')
					column.mask_data = terminal[column.mask_data];

					if (typeof column.mask_bit == 'string')
					column.mask_bit = terminal[column.mask_bit];

					if (typeof column.factor == 'string')
					column.factor = terminal[column.factor];

					if ((MyApp.tree.permission_admin === true)&&((name == 'lls_left')||(name == 'lls_right')||(name == 'speed'))) {
						column.editor = new Ext.form.NumberField({});
					}

					if (column.binary !== true) {

						column.xtype	= 'numbercolumn';
						column.format	= '0.00';
					}

					if (typeof column.data == 'object') {
						columns.push(column);
					}
				}
			}

			var store = Ext.create('Ext.data.Store', {
				storeId:'tablestore',
				fields: fields,
				proxy: {
					type: 'memory',
					reader: {
						type: 'json',
						root: 'items'
					}
				},
				sorters: [{
					direction: 'DESC',
					property: 't'
				}]
			});

			var grid = this.down('#table');

			grid.reconfigure(store, columns);

			grid.up('panel').setTitle(record.get('text'));

			MyApp.tableData = {
				columns:		columns,
				store:			store,
				grid:			grid,
				start_point:	0,
				record:			record,
				flags1:			0,
				flags2:			0,
				bits1:			0,
			};

		}
		else {
			console.log('merge table ' + record.get('text'));

			for (i = 0; i < channelsCount; i++) {

				var channel		= channelsStore.getAt(i);

				name			= channel.get('name');

				columns			= MyApp.tableData.columns;
				columns_count	= columns.length;

				for (k = 0; k < columns_count; k++) {

					column = columns[k];

					if (column.dataIndex == name) {

						column.data			= terminal[channel.get('data_field')];
						column.data_bit		= channel.get('binary_bit');

						column.mask_data	= terminal[channel.get('mask')];
						column.mask_bit		= channel.get('mask_bit');

						column.factor		= channel.get('factor');

						if (typeof column.data == 'string')
						column.data = terminal[column.data];

						if (typeof column.data_bit == 'string')
						column.data_bit = terminal[column.data_bit];

						if (typeof column.mask_data == 'string')
						column.mask_data = terminal[column.mask_data];

						if (typeof column.mask_bit == 'string')
						column.mask_bit = terminal[column.mask_bit];

						if (typeof column.factor == 'string')
						column.factor = terminal[column.factor];

						break;
					}
				}
			}
		}

		var f1				= MyApp.tableData.flags1;
		var f2				= MyApp.tableData.flags2;
		var b1				= MyApp.tableData.bits1;
		var start_point		= MyApp.tableData.start_point;
		columns				= MyApp.tableData.columns;
		columns_count		= columns.length;

		if (columns_count > 1) {

			var time = terminal.arr_time;	

			if (typeof time == 'object') {

				var points_count = time.length;

				if (points_count > start_point) {

					var bits1	= terminal.arr_bits1;
					var lat		= terminal.arr_lat;
					var lng		= terminal.arr_lng;
					var events	= terminal.arr_event;
					var flags1	= terminal.arr_flags1;
					var flags2	= terminal.arr_flags2;

					var b1 = bits1[start_point];

					for (i = start_point; i < points_count; i++) {

						var item = {
							time: Ext.Date.format(new Date(time[i] * 1000), 'd.m.Y H:i:s'),
							t: time[i]
						};

						if (bits1[i] & 0x20) {
							item.lat = lat[i];
							item.lng = lng[i];
						}

						var item_not_empty = false;

						var bit1 = bits1[i];

						var event = '';

						if (bit1 & 0x80) {

							if ((events[i] >= 3)&&(events[i] < 0x20)) {
								var e = events[i] - 3;
								if (e & 0x01) {
									event += 'Холодный старт, ';
								}
								if (e & 0x02) {
									event += 'Аппаратный сброс, ';
								}
								if (e & 0x04) {
									event += 'Программный сброс, ';
								}
								if (e & 0x08) {
									event += 'Сторожевой таймер, ';
								}
								if (e & 0x10) {
									event += 'Строжевой таймер, ';
								}
								if (e & 0x20) {
									event += 'Сбой питания, ';
								}
							}
							else {
								switch (events[i]) {
									case 1:
									event += 'Связь восстановлена, ';
									break;
									case 2:
									event += 'Связь потеряна, ';
									break;
									case 0x20:
									event += 'Начало обновления прошивки, ';
									break;
									case 0x23:
									event += 'Обновление прошивки завершено, ';
									break;
									case 0x22:
									event += 'Ошибка при обновлении прошивки, ';
									break;
									case 0x24:
									event += 'Профиль поврежден, ';
									break;
									default:
									event += 'Неизвестное событие ' + events[i]+ ', ';
									break;
								}
							}
						}

						if (bit1 & 0x40) {

							var f1_set = flags1[i] & (f1 ^ flags1[i]);
							var f1_reset = f1 & (f1 ^ flags1[i]);

							var f2_set = flags2[i] & (f2 ^ flags2[i]);
							var f2_reset = f2 & (f2 ^ flags2[i]);


							if (f2_reset & 0x04) {
								if ((flags2[i] & 0x02) === 0) {
									event += "Активный режим, ";
								}
							}
							if (f2_reset & 0x02) {
								if ((flags2[i] & 0x04) === 0) {
									event += "Активный режим, ";
								}
							}

							if (f2_set & 0x04)
							event += "Ждущий режим, ";
							if (f2_set & 0x02)
							event += "Спящий режим, ";

							f1 = flags1[i];
							f2 = flags2[i];

							var b1_set = bit1 & (b1 ^ bit1);
							var b1_reset = b1 & (b1 ^ bit1);

							if (b1_set & 0x20) {
								event += "Сигнал навигации принят, ";
							}

							if (b1_reset & 0x20) {
								event += "Сигнал навигации потерян, ";
							}

							b1 = bit1;
						}

						if (event != '') {
							item.event = event.substring(0, event.length - 2);
							item_not_empty = true;
						}

						for (k = 2; k < columns_count; k++) {

							column = columns[k];

							if ((column.filter_data === null)||((column.filter_data[i] & column.filter_bit) !== 0)) {

								if (column.mask_data[i] & column.mask_bit) {

									item_not_empty = true;

									if (column.binary) {
										item[column.dataIndex] = (column.data[i] & column.data_bit) ? 'Да' : 'Нет';
									}
									else {
										item[column.dataIndex] = column.data[i] * column.factor;
									}
								}
							}
						}

						if (item_not_empty) {
							data.push(item);
						}
					}
				}
			}
		}

		var first_row = 0;

		if (MyApp.tableData.grid.getStore().getCount() > 0) {
			first_row = MyApp.tableData.grid.findPlugin('bufferedrenderer').getFirstVisibleRowIndex();
		}

		MyApp.tableData.store.loadData(data, true);
		MyApp.tableData.store.sort();

		if (MyApp.tableData.grid.getStore().getCount() > (first_row + 1)) {
			MyApp.tableData.grid.findPlugin('bufferedrenderer').scrollTo(first_row, false);
		}

		MyApp.tableData.flags1		= f1;
		MyApp.tableData.flags2		= f2;
		MyApp.tableData.bits1		= b1;
		MyApp.tableData.start_point	= terminal.arr_time.length;
	},

	createList: function(merge) {
		function beauty_time(t) {

			var date = new Date(t * 1000);

			var d = date.getDate();
			var M = date.getMonth() + 1;
			var y = date.getYear() + 1900;
			var h = date.getHours();
			var m = date.getMinutes();
			var s = date.getSeconds();

			if (d < 10) d = '0' + d;
			if (M < 10) M = '0' + M;
			if (h < 10) h = '0' + h;
			if (m < 10) m = '0' + m;
			if (s < 10) s = '0' + s;

			return d + '.' + M + '.' + y + ' ' + h + ':' + m + ':' + s;
		}

		var data = [];

		this.down('#tree').getRootNode().cascadeBy( 

		function(n) {

			if (n.raw.type >= 1000) {

				var object = n.raw;

				var item = {
					text: n.getPath('text'),
					imei: object.dev_id,
					type: (object.type == 1000) ? 'АК306' : (object.type == '1001' ? 'AK308' : 'АК305'),
					phone: object.phone,
					link: object.online ? 'На связи' : 'Нет связи',
					nav_valid: 'Нет данных',
					fw: 'Нет данных',
					last_point: 'Нет данных',
				};

				if (typeof object.terminal == 'object') {

					item.link = object.terminal.link ? 'На связи' : 'Нет связи';
					item.last_point = beauty_time(object.terminal.last_record_time);

					if (typeof object.terminal.nav == 'object') {
						item.nav_valid = object.terminal.nav.nav_valid ? 'Принято' : 'Не принято';
					}
				}
				else {
					if (typeof object.last_nav == 'object') {
						item.last_point = beauty_time(object.last_nav.time);
						if (typeof object.last_data == 'object') {
							item.nav_valid = (object.last_nav.time == object.last_data.time) ? 'Принято' : 'Не принято';
						}
					}
				}

				if ((typeof object.info == 'object')&&(typeof object.info.fw == 'number')) {
					item.fw = object.info.fw + ' ';
				}


				data.push(item);
			}
		}
		);

		var store = Ext.create('Ext.data.Store', {
			storeId:'tablestore',
			fields: [ 'text', 'imei', 'type', 'phone', 'position', 'link', 'nav_valid', 'fw', 'last_point' ],
			data: data, 
			proxy: {
				type: 'memory',
				reader: {
					type: 'json'
				}
			},
		});

		var columns = [
		{
			xtype: 'rownumberer',
			resizable: true
		},
		{
			xtype: 'gridcolumn',
			dataIndex: 'text',
			text: 'Название',
			items:[{
				xtype: 'searchtrigger',
				autoSearch: true,
				anyMatch: true
			}]
		},
		{
			xtype: 'gridcolumn',
			dataIndex: 'imei',
			text: 'IMEI',
			items:[{
				xtype: 'searchtrigger',
				autoSearch: true,
				anyMatch: true
			}]
		},
		{
			xtype: 'gridcolumn',
			dataIndex: 'phone',
			text: 'Телефон',
			items:[{
				xtype: 'searchtrigger',
				autoSearch: true,
				anyMatch: true
			}]
		},
		{
			xtype: 'gridcolumn',
			dataIndex: 'type',
			text: 'Тип'
		},
		{
			xtype: 'gridcolumn',
			dataIndex: 'link',
			text: 'Связь'
		},
		{
			xtype: 'gridcolumn',
			dataIndex: 'nav_valid',
			text: 'Навигация'
		},
		{
			xtype: 'gridcolumn',
			dataIndex: 'fw',
			text: 'Прошивка'
		},
		{
			xtype: 'gridcolumn',
			dataIndex: 'last_point',
			text: 'Последняя точка'
		}
		];

		var grid = this.down('#list');

		grid.reconfigure(store, columns);


	},

	createCharts: function(record) {
		console.log('create charts ' + record.get('text'));

		var i;
		var column;
		var terminal			= record.terminal;
		var channelsStore		= Ext.data.StoreManager.lookup('ChannelsMemoryStore');

		var filterByIgnition	= this.down('#table_tab').down('#ignition_checkbox').getValue();

		var tab					= this.down('#charts_tab');
		var height				= tab.ownerCt.getHeight();

		var filter_data;
		var filter_bit;

		if ((filterByIgnition)&&(terminal.has_ignition)) {
			filter_data	= terminal.ignition_data;
			filter_bit	= terminal.ignition_bit;
		}
		else {
			filter_data	= null;
			filter_bit	= null;
		}

		MyApp.charts = [];

		tab.removeAll(true);

		var name;

		for (i = channelsStore.getCount(); i--;) {

			var channel = channelsStore.getAt(i);

			if ((channel.get('visible') !== false)&&(terminal[channel.get('presense_field')])) {

				name = channel.get('name');

				column = {

					text:			channel.get('text'),
					dataIndex:		name,

					data:			terminal[channel.get('data_field')],
					data_bit:		channel.get('binary_bit'),

					mask_data:		terminal[channel.get('mask')],
					mask_bit:		channel.get('mask_bit'),

					binary:			channel.get('binary'),
					factor:			channel.get('factor'),

					filter_data:	filter_data,
					filter_bit:		filter_bit
				};

				if (typeof column.data == 'string')
				column.data = terminal[column.data];

				if (typeof column.data_bit == 'string')
				column.data_bit = terminal[column.data_bit];

				if (typeof column.mask_data == 'string')
				column.mask_data = terminal[column.mask_data];

				if (typeof column.mask_bit == 'string')
				column.mask_bit = terminal[column.mask_bit];

				if (typeof column.factor == 'string')
				column.factor = terminal[column.factor];

				if (typeof column.data == 'object') {

					var chart = Ext.create('Ext.chart.Panel', {

						itemId:		name,
						title:		column.text + ' [' + record.get('text') + ']',

						x_data:		terminal.arr_time,
						y_data:		column.data,

						mask_data:	column.mask_data,
						mask_bit:	column.mask_bit,

						binary:		column.binary,
						binary_bit:	column.data_bit,

						filter_data:filter_data,
						filter_bit:	filter_bit,

						view_start:	MyApp.t_from,
						view_end:	MyApp.t_to,
						height:		height * 0.4,
						factor:		column.factor,

						closable: true,

						listeners: {
							resize: {
								fn: this.onChartResize,
								scope: this
							},
							sync: {
								fn: this.onChartSync,
								scope: this
							},
							close: {
								fn: this.onChartClose,
								scope: this
							},
							click: {
								fn: this.onChartClick,
								scope: this
							}
						}
					});

					var components = tab.removeAll(false);

					if (components.length) {

						tab.add(Ext.create('Ext.container.Container', {

							layout: {
								type: 'vbox',
								align: 'stretch'
							},
							items: [
							chart,
							{
								xtype: 'splitter'
							},
							components[0]
							]
						}));
					}
					else {
						tab.add(chart);
					}

					MyApp.charts.push(chart);
				}
			}
		}

		MyApp.chartsData = {
			record:record
		};

	},

	onChartResize: function(component, width, height, oldWidth, oldHeight) {
		if (height != oldHeight) {
			var possibleSplitter = component.nextSibling();
			if (possibleSplitter) {
				var possibleComponent = possibleSplitter.nextSibling();
				if (possibleComponent) {
					if (oldHeight) {
						if (possibleComponent.isPanel) {
							console.log(possibleComponent);
							possibleComponent.height += height - oldHeight;
						}else {
							delete possibleComponent.height;
						}
						component.ownerCt.updateLayout();
					}
				}								
			}
		}

	},

	onChartClose: function(panel) {
		var next = panel.nextSibling();
		if ((next)&&(next.isXType('splitter')))
		panel.ownerCt.remove(next, true);
	},

	onChartSync: function(component, view_x_start, view_x_end) {
		var fix = component.up('#charts_tab').down('#fix_checkbox').getValue();

		if (fix) {

			var charts = MyApp.charts;

			for (var i = charts.length; i--;) {
				if (charts[i] != component) {
					charts[i].setViewPort(view_x_start, view_x_end);
				}
			}
		}
	},

	loadChannels: function() {
		var data = [				
		{ 
			text:			'Скорость', 
			name:			'speed', 
			mask:			'arr_bits1',
			mask_bit:		0x20,
			factor:			0.1,
			data_field:		'arr_speed',
			presense_field:	'trueValue'
		},
		{ 
			text:			'Зажигание', 
			name:			'ignition',
			binary:			true,
			binary_bit:		'ignition_bit',
			data_field:		'ignition_field',
			mask:			'ignition_mask_field',
			mask_bit:		'ignition_mask_bit',
			presense_field:	'has_ignition'
		},
		{ 
			text: 			'Двигатель', 
			name: 			'engine', 
			binary: 		true,
			binary_bit: 	'engine_bit',
			data_field: 	'engine_field',
			mask: 			'engine_mask_field',
			mask_bit:		'engine_mask_bit',
			presense_field:	'has_engine'
		},
		{ 
			text:			'Движение', 
			name:			'move2', 
			binary:			true,
			binary_bit:		'move_bit',
			data_field: 	'move_field',
			mask:			'move_mask_field',
			mask_bit:		'move_mask_bit',
			presense_field:	'has_move'
		},
		{ 
			text:			'Тахометр', 
			name:			'taho', 
			factor:			'taho_factor',
			data_field: 	'taho_field',
			mask:			'taho_mask_field',
			mask_bit:		'taho_mask_bit',
			presense_field:	'has_taho'
		},
		{
			text:			'Уровень топлива общий', 
			name:			'lls_all', 
			data_field:		'arr_total_fuel',
			mask:			'arr_total_fuel_mask',
			mask_bit:		1,
			presense_field:	'has_lls'
		},
		{
			text:			'Уровень топлива левый', 
			name:			'lls_left', 
			data_field:		'arr_left_fuel',
			mask:			'lls_left_mask',
			mask_bit:		'lls_left_mask_bit',
			presense_field:	'has_lls_left'
		},
		{
			text:			'Уровень топлива правый', 
			name:			'lls_right', 
			data_field:		'arr_right_fuel',
			mask:			'lls_right_mask',
			mask_bit:		'lls_right_mask_bit',
			presense_field:	'has_lls_right'
		},
		{ 
			text: 'Высота', 
			name: 'altitude', 
			mask: 'arr_bits1',
			mask_bit: 0x10,
			data_field: 'arr_altitude',
			presense_field:	'capAltitude'
		},
		{ 
			text: 'Путевой угол', 
			name: 'cog', 
			mask: 'arr_bits1',
			mask_bit: 0x08,
			data_field: 'arr_cog',
			presense_field:	'capCog'
		},
		{ 
			text: 'Количество спутников', 
			name: 'sat_count', 
			mask: 'arr_bits3',
			mask_bit: 0x40,
			data_field: 'arr_sat_count',
			presense_field:	'capSatCount'
		},
		{ 
			text: 'Напряжение питания', 
			name: 'vcc', 
			mask: 'arr_bits3',
			mask_bit: 0x80,
			factor: 0.001,
			data_field: 'arr_vcc',
			presense_field:	'capVcc'
		},
		{ 
			text: 'RS485 1', 
			name: 'rs485_1', 
			mask: 'arr_bits1',
			mask_bit: 0x04,
			data_field: 'arr_rs485_1',
			presense_field:	'capRs485'
		},
		{ 
			text: 'RS485 2', 
			name: 'rs485_2', 
			mask: 'arr_bits1',
			mask_bit: 0x02,
			data_field: 'arr_rs485_2',
			presense_field:	'capRs485'
		},
		{ 
			text: 'RS232 1', 
			name: 'rs232_1', 
			mask: 'arr_bits4',
			mask_bit: 0x80,
			data_field: 'arr_rs232_1',
			presense_field:	'capRs232_1'
		},
		{ 
			text: 'RS232 2', 
			name: 'rs232_2', 
			mask: 'arr_bits4',
			mask_bit: 0x40,
			data_field: 'arr_rs232_2',
			presense_field:	'capRs232_2'
		},
		{ 
			text: 'Встроенный одометр', 
			name: 'odometr', 
			mask: 'bits4',
			mask_bit: 0x20,
			data_field: 'odometr',
			presense_field:	'capOdometr'
		},
		{ 
			text: 'Аналоговый вход №1', 
			name: 'analog1', 
			mask: 'arr_bits2',
			mask_bit: 0x80,
			factor: 0.001,
			data_field: 'arr_analog1',
			presense_field:	'capAnalog1'
		},
		{ 
			text: 'Аналоговый вход №2', 
			name: 'analog2', 
			mask: 'arr_bits2',
			mask_bit: 0x40,
			factor: 0.001,
			data_field: 'arr_analog2',
			presense_field:	'capAnalog2'
		},
		{ 
			text: 'Аналоговый вход №3', 
			name: 'analog3', 
			mask: 'arr_bits2',
			mask_bit: 0x20,
			factor: 0.001,
			data_field: 'arr_analog3',
			presense_field:	'capAnalog3'
		},
		{ 
			text: 'Аналоговый вход №4', 
			name: 'analog4', 
			mask: 'arr_bits3',
			mask_bit: 0x20,
			factor: 0.001,
			data_field: 'arr_analog4',
			presense_field:	'capAnalog4'
		},
		{ 
			text: 'Аналоговый вход №5', 
			name: 'analog5', 
			mask: 'arr_bits5',
			mask_bit: 0x80,
			factor: 0.001,
			data_field: 'arr_analog5',
			presense_field:	'capAnalog5'
		},
		{ 
			text: 'Аналоговый вход №6', 
			name: 'analog6', 
			mask: 'arr_bits5',
			mask_bit: 0x40,
			factor: 0.001,
			data_field: 'arr_analog6',
			presense_field:	'capAnalog6'
		},
		{ 
			text: 'Дискретный вход №1', 
			name: 'discrete1', 
			binary: true, 
			binary_bit: 0x80,
			mask: 'arr_bits1',
			mask_bit: 0x40,
			data_field: 'arr_flags2',
			presense_field:	'capDiscrete1'
		},
		{ 
			text: 'Дискретный вход №2', 
			name: 'discrete2', 
			binary: true, 
			binary_bit: 0x40,
			mask: 'arr_bits1',
			mask_bit: 0x40,
			data_field: 'arr_flags2',
			presense_field:	'capDiscrete2'
		},
		{ 
			text: 'Дискретный вход №3', 
			name: 'discrete3', 
			binary: true, 
			binary_bit: 0x20,
			mask: 'arr_bits1',
			mask_bit: 0x40,
			data_field: 'arr_flags2',
			presense_field:	'capDiscrete3'
		},
		{ 
			text: 'Дискретный вход №4', 
			name: 'discrete4', 
			binary: true, 
			binary_bit: 0x10,
			mask: 'arr_bits1',
			mask_bit: 0x40,
			data_field: 'arr_flags2',
			presense_field:	'capDiscrete4'
		},
		{ 
			text: 'Дискретный вход №5', 
			name: 'discrete5', 
			binary: true, 
			binary_bit: 0x08,
			mask: 'arr_bits1',
			mask_bit: 0x40,
			data_field: 'arr_flags2',
			presense_field:	'capDiscrete5'
		},
		{ 
			text: 'Частотный вход №1', 
			name: 'frequency1', 
			mask: 'arr_bits2',
			mask_bit: 0x10,
			factor: 0.1,
			data_field: 'arr_frequency1',
			presense_field:	'capFrequency1'
		},
		{ 
			text: 'Частотный вход №2', 
			name: 'frequency2', 
			mask: 'arr_bits2',
			mask_bit: 0x08,
			factor: 0.1,
			data_field: 'arr_frequency2',
			presense_field:	'capFrequency2'
		},
		{ 
			text: 'Частотный вход №3', 
			name: 'frequency3', 
			mask: 'arr_bits2',
			mask_bit: 0x04,
			factor: 0.1,
			data_field: 'arr_frequency3',
			presense_field:	'capFrequency3'
		},
		{ 
			text: 'Частотный вход №4', 
			name: 'frequency4', 
			mask: 'arr_bits2',
			mask_bit: 0x02,
			factor: 0.1,
			data_field: 'arr_frequency4',
			presense_field:	'capFrequency4'
		},
		{ 
			text: 'Частотный вход №5', 
			name: 'frequency5', 
			mask: 'bits4',
			mask_bit: 0x10,
			factor: 0.1,
			data_field: 'frequency5',
			presense_field:	'capFrequency5'
		},
		{ 
			text: 'Частотный вход №6', 
			name: 'frequency6', 
			mask: 'arr_bits4',
			mask_bit: 0x10,
			factor: 0.1,
			data_field: 'arr_frequency6',
			presense_field:	'capFrequency6'
		},
		{ 
			text: 'Частотный вход №7', 
			name: 'frequency7', 
			mask: 'arr_bits4',
			mask_bit: 0x10,
			factor: 0.1,
			data_field: 'arr_frequency7',
			presense_field:	'capFrequency7'
		},
		{ 
			text: 'Частотный вход №8', 
			name: 'frequency8', 
			mask: 'arr_bits4',
			mask_bit: 0x10,
			data_field: 'arr_frequency8',
			presense_field:	'capFrequency8'
		},
		{ 
			text: 'Импульсный вход №1', 
			name: 'counter1', 
			mask: 'arr_bits3',
			mask_bit: 0x10,
			factor: 0.1,
			data_field: 'arr_counter1',
			presense_field:	'capCounter1'
		},
		{ 
			text: 'Импульсный вход №2', 
			name: 'counter2', 
			mask: 'arr_bits3',
			mask_bit: 0x08,
			data_field: 'arr_counter2',
			presense_field:	'capCounter2'
		},
		{ 
			text: 'Импульсный вход №3', 
			name: 'counter3', 
			mask: 'arr_bits3',
			mask_bit: 0x04,
			data_field: 'arr_counter3',
			presense_field:	'capCounter3'
		},
		{ 
			text: 'Импульсный вход №4', 
			name: 'counter4', 
			mask: 'arr_bits3',
			mask_bit: 0x02,
			data_field: 'arr_counter4',
			presense_field:	'capCounter4'
		},
		{ 
			text: 'Импульсный вход №5', 
			name: 'counter5', 
			mask: 'arr_bits5',
			mask_bit: 0x20,
			data_field: 'arr_counter5',
			presense_field:	'capCounter5'
		},
		{ 
			text: 'Импульсный вход №6', 
			name: 'counter6', 
			mask: 'arr_bits5',
			mask_bit: 0x10,
			data_field: 'arr_counter6',
			presense_field:	'capCounter6'
		},
		{ 
			text: 'Импульсный вход №7', 
			name: 'counter7', 
			mask: 'arr_bits5',
			mask_bit: 0x08,
			data_field: 'arr_counter7',
			presense_field:	'capCounter7'
		},
		{ 
			text: 'Импульсный вход №8', 
			name: 'counter8', 
			mask: 'arr_bits5',
			mask_bit: 0x04,
			data_field: 'arr_counter8',
			presense_field:	'capCounter8'
		},
		{ 
			text: 'Форсунка', 
			name: 'injector', 
			mask: 'arr_bits5',
			mask_bit: 0x02,
			data_field: 'arr_injector',
			presense_field:	'capInjector'
		}
		]

		var count = data.length;

		var memory	= Ext.data.StoreManager.lookup('ChannelsMemoryStore');

		memory.removeAll();

		var channels = Ext.decode(localStorage.getItem('channels'));

		if (channels) {

			for (var i = 0; i < channels.length; i++) {

				var channel = channels[i];

				for (var k = 0; k < count; k++) {

					var item = data[k];

					if (item.name == channel.a) {

						item.visible = channel.b;

						memory.add(item);

						item.found = true;

						break;
					}
				}
			}
		}

		for (i = 0; i < count; i++) {

			var item = data[i];

			if (!item.found) {
				memory.add(item);
			}
		}
	},

	createInfo: function(record) {
		this.down('#name').setValue(record.raw.name);
		this.down('#dev_id').setValue(record.raw.dev_id + ' ' + record.getId());
		this.down('#phone').setValue(record.raw.phone);	

		this.down('#fw').setValue(((typeof record.raw.info == 'object') && (typeof record.raw.info.fw == 'number')) ? record.raw.info.fw : 'Неизвестно');
		this.down('#balance').setValue(((typeof record.raw.info == 'object') && (typeof record.raw.info.balance == 'string')) ? record.raw.info.balance : 'Неизвестно');

		var custom = record.raw.custom;

		if (custom)	{
			this.down('#info').setValue(custom.info);

			if (custom.color) {
				this.down('#color').picker.select(custom.color);
			}
			else {
				tab.down('#color').picker.select('FF0000');
			}
		}
		else {
			this.down('#info').setValue('');
			this.down('#color').picker.select('FF0000');
		}

	},

	reportMileage: function(report) {
		console.log('report mileage');

		var t_from		= report.t_from;
		var t_to		= report.t_to;
		var responses	= report.responses;
		var responses_length = responses.length;

		function beauty_time(t) {

			var date = new Date(t * 1000);

			var d = date.getDate();
			var M = date.getMonth() + 1;
			var y = date.getYear() + 1900;
			var h = date.getHours();
			var m = date.getMinutes();
			var s = date.getSeconds();

			if (d < 10) d = '0' + d;
			if (M < 10) M = '0' + M;
			if (h < 10) h = '0' + h;
			if (m < 10) m = '0' + m;
			if (s < 10) s = '0' + s;

			return d + '.' + M;
		}

		function beauty_time_full(t) {

			var date = new Date(t * 1000);

			var d = date.getDate();
			var M = date.getMonth() + 1;
			var y = date.getYear() + 1900;
			var h = date.getHours();
			var m = date.getMinutes();
			var s = date.getSeconds();

			if (d < 10) d = '0' + d;
			if (M < 10) M = '0' + M;
			if (h < 10) h = '0' + h;
			if (m < 10) m = '0' + m;
			if (s < 10) s = '0' + s;

			return d + '.' + M + '.' + y + ' ' + h + ':' + m + ':' + s;
		}

		var pdf_report = {
			title: "Отчет по пробегу",
			rows: [
			"Начало периода: " + beauty_time_full(t_from),
			"Конец периода: " + beauty_time_full(t_to)
			],
			table: [
			["Терминал"]
			]
		};

		var i;

		var html = "<table border='1'>";

		html += "<tr><td></td>";
		for (var i = t_from; i < t_to; i+= 86400) {
			html += "<td>" + beauty_time(i) + "</td>";
			pdf_report.table[0].push(beauty_time(i));
		}
		html += "<td>Итого</td></tr>";
		pdf_report.table[0].push('Итого');

		for (var r = 0; r < responses_length; r++) {

			var response	= responses[r];
			var record		= response.record;
			var data		= response.data;
			var data_length	= data.length;
			var total		= 0;

			html += "<tr>";

			html += "<td>" + record.get('text') + "</td>";

			var row = [ record.get('text') ];
			for (var t = t_from; t < t_to; t += 86400) {

				html += "<td>";

				var m = 0;

				for (var d = 0; d < data_length; d++) {

					if ((data[d].hour >= t)&&(data[d].hour < (t + 86400)))  {
						m += data[d].mileage;
					}
				}

				html += (m / 1000).toFixed(2) + 'км';
				total += m;
				row.push((m / 1000).toFixed(2).toString() + 'км');

				html += "</td>";
			}

			html += "<td>" + ((total / 1000).toFixed(2)) + "км</td>";

			row.push(((total / 1000).toFixed(2)).toString() + 'км');

			pdf_report.table.push(row);

			html += "</tr>";
		}

		html += "</table>";

		var tab = this.down('#reports_tab');

		tab.add( Ext.create("Ext.Component", {
			autoScroll: true,
			margin: 10,
			border: false,
			html: html
		}));

		MyApp.pdf_report = pdf_report;
		Ext.getCmp('pdf_button_vert').show();
		Ext.getCmp('pdf_button_horz').show();
	},

	reportFlag: function(report) {
		var t_from		= report.t_from;
		var t_to		= report.t_to;
		var responses	= report.responses;
		var responses_length = responses.length;

		function beauty_time(t) {

			var date = new Date(t * 1000);

			var d = date.getDate();
			var M = date.getMonth() + 1;
			var y = date.getYear() + 1900;
			var h = date.getHours();
			var m = date.getMinutes();
			var s = date.getSeconds();

			if (d < 10) d = '0' + d;
			if (M < 10) M = '0' + M;
			if (h < 10) h = '0' + h;
			if (m < 10) m = '0' + m;
			if (s < 10) s = '0' + s;

			return d + '.' + M + '.' + y + ' ' + h + ':' + m + ':' + s;
		}

		function geocode(requests, index)
		{
			if (index >= requests.length) {
				return;
			}

			var request = {
				location: new google.maps.LatLng(requests[index].lat, requests[index].lng),
				rankBy: google.maps.places.RankBy.DISTANCE,
				types: ["establishment"]
			};

			MyApp.geocoder.search(request, function (results, status) {

				if ((status == google.maps.places.PlacesServiceStatus.OK)&&(results.length > 0)) {
					document.getElementById('a' + requests[index].coockie).innerHTML = results[0].vicinity;
				}

				setTimeout(function() { geocode(requests, index + 1); }, 500);		
			});


		}

		var pdf_report = {
			title: "Отчет",
			rows: [
			"Начало периода: " + beauty_time(t_from),
			"Конец периода: " + beauty_time(t_to)
			],
			sections: []
		};

		var i;

		var html = '';
		var geo_requests = [];

		for (var r = 0; r < responses_length; r++) {

			var response	= responses[r];
			var record		= response.record;
			var data		= response.data;
			var data_length	= data.length;
			var total		= 0;
			var t_on		= t_from;
			var t_off		= t_from;
			var is_on		= false;
			var total_on	= 0;
			var num			= 1;

			var section		= {
				title: record.get('text'),
				objects: [ 
				{
					type: 'table',
					data: []
				}]
			};

			var table = section.objects[0].data;

			table.push([ 'Время включения', 'Время выключения', 'Длительность', 'Пробег', 'Адрес прибытия' ]);

			html += "<h1>" + record.get('text') + "</h1>";

			html += "<table border='1'>";

			html += "<tr><td>N</td><td>Время включения</td><td>Время выключения<td>Длительность</td><td>Пробег</td><td>Адрес прибытия</td></tr>";

			for (var i = 0; i < data_length; i++) {

				var item = data[i];

				if (item.status === false) {

					t_off = item.time;

					var diff = t_off - t_on;

					var h = Math.floor(diff / 3600);
					var m = Math.floor((diff - h * 3600) / 60);
					var s = Math.floor(diff - h * 3600 - m * 60);

					if (h <=9) {
						h = '0' + h;
					}
					if (m <= 9) {
						m = '0' + m;
					}
					if (s <= 9) {
						s = '0' + s;
					}

					html += "<tr><td>"+num+"</td><td>" + beauty_time(t_on) + "</td><td>" + beauty_time(t_off) + 
					"</td><td>" + h + ":" + m + ":" + s + "</td><td>"+(item.distance / 1000).toFixed(2)+"км</td><td>";

					var address;

					if ((item.address)&&(item.address.near_address != 'not found')) {

						address = item.address.near_address.address.city + ' ' + item.address.near_address.address.street + ' ' + item.address.near_address.address.build;
					}
					else {
						address = 'Неизвестно';

						geo_requests.push( {
							lat: item.lat / 10000000,
							lng: item.lng / 10000000,
							coockie: i
						});
					}

					if ((item.lat) && (item.lng)) {
						html += "<a href='#' onclick='Ext.getCmp(\"tab\").setActiveTab(0);MyApp.map.setView([" + (item.lat / 10000000) + "," + (item.lng / 10000000) + "], 17); var popup = L.popup().setLatLng([" + (item.lat / 10000000) + "," + (item.lng / 10000000) + "]).setContent(\""+address+"\").openOn(MyApp.map);	return false'>"
					}

					html += "<span id='a"+i+"'>" + address + "</span>";

					if ((item.lat) && (item.lng)) {
						html += "</a>"
					}

					html += "</td></tr>";

					num++;
					total_on += diff;

					is_on = false;

					table.push( [ beauty_time(t_on), beauty_time(t_off), h + ":" + m + ":" + s, (item.distance / 1000).toFixed(2)+"км", address] );

				}
				else {
					is_on = true;
					t_on = item.time;
				}			
			}

			if (is_on) {

				var today = new Date();
				var now = today.getTime() / 1000;

				if (t_to > now) {
					t_to = now;
				}

				var diff = t_to - t_on;

				var h = Math.floor(diff / 3600);
				var m = Math.floor((diff - h * 3600) / 60);
				var s = Math.floor(diff - h * 3600 - m * 60);

				if (h <= 9) {
					h = '0' + h;
				}
				if (m <= 9) {
					m = '0' + m;
				}
				if (s <= 9) {
					s = '0' + s;
				}

				total_on += diff;
				html += "<tr><td>"+num+"</td><td>"+beauty_time(t_on)+"</td><td>-<td>-</td><td>-</td><td>в пути</td></tr>";

				table.push( [ beauty_time(t_on), '-', '-', '-', 'в пути'] );
			}

			html += "</table><br>";

			var h = Math.floor(total_on / 3600);
			var m = Math.floor((total_on - h * 3600) / 60);
			var s = Math.floor(total_on - h * 3600 - m * 60);

			if (h <= 9) {
				h = '0' + h;
			}
			if (m <= 9) {
				m = '0' + m;
			}
			if (s <= 9) {
				s = '0' + s;
			}

			html += "Итого наработано: " + h + ":" + m + ":" + s + "<br><br>";

			section.objects.push( {
				type: 'row',
				data: "Итого наработано: " + h + ":" + m + ":" + s
			});

			pdf_report.sections.push(section);
		}

		geocode(geo_requests, 0);

		var tab = this.down('#reports_tab');

		tab.add( Ext.create("Ext.Component", {
			autoScroll: true,
			margin: 10,
			border: false,
			html: html
		}));

		MyApp.pdf_report = pdf_report;
		Ext.getCmp('pdf_button_vert').show();
		Ext.getCmp('pdf_button_horz').show();
	},

	getLLSData: function(record, left) {
		var history_data = record.history_data;

		if (typeof history_data == 'object') {

			var time = history_data.time;

			if (typeof time == 'object') {

				var time_len = time.length;

				if (time_len > 0) {

					var sensors = record.raw.sensors;
					var caps = record.raw.caps;

					if ((typeof sensors == 'object')&&(typeof caps == 'object')) {

						var lls = (left) ? record.raw.llsleft : record.raw.llsright;
						var num = (left) ? 2 : 3;

						if (typeof lls == 'object') {

							var table = lls.table;

							if (typeof table == 'object') {

								var table_len = table.length;

								if (table_len > 1) {

									var sensor	= table[0].sensor_value;
									var fuel	= table[0].fuel_value;

									for (var i = 1; i < table_len; i++) {

										var sensor_value	= table[i].sensor_value;
										var fuel_value		= table[i].fuel_value;

										table[i - 1].d = (fuel_value - fuel) / (sensor_value - sensor);

										sensor = sensor_value;
										fuel = fuel_value;
									}

									var data;
									var mask;
									var mask_bit;
									var factor = 1.0;

									var k;

									for (k = 1; k <= 8; k++) {

										var freq_bit = [0x10, 0x08, 0x04, 0x02, 0x10, 0x08, 0x04, 0x02];

										if ((caps['frequency' + k])&&(sensors['frequency' + k + '_type'] == num)) {

											data = history_data['frequency' + k];

											mask = (k <= 4) ? 'bits2' : 'bits4';
											mask_bit = freq_bit[k - 1];

											factor = 0.1;

											break;
										}
									}

									if (k == 9) {

										var analog_bit = [0x80, 0x40, 0x20, 0x20, 0x80, 0x40, 0, 0];

										for (k = 1; k <= 8; k++) {

											if ((caps['analog' + k])&&(sensors['analog' + k + '_type'] == num)) {

												data = history_data['analog' + k];

												mask = (k <= 3) ? 'bits2' : ((k == 4) ? 'bits3' : 'bits5');
												mask_bit = analog_bit[k - 1];

												factor = 0.001;

												break;
											}
										}
									}
									if (data) {

										var lls_data = new Float32Array(data.length);

										var time_count = time.length;

										var mask_data = history_data[mask];

										for (k = 0; k < time_count; k++) {

											var sensor = data[k] * factor;

											if (sensor <= table[0].sensor_value) {
												lls_data[k] = table[0].fuel_value;
											}
											else
											if (sensor >= table[table_len - 1].sensor_value) {
												lls_data[k] = table[table_len - 1].fuel_value;
											}
											else {

												var prev_item = table[table_len - 1];

												for (var j = table_len - 1; j--;) {

													var item = table[j];

													if ((sensor >= item.sensor_value)&&(sensor < prev_item.sensor_value)) {

														lls_data[k] = item.fuel_value + item.d * (sensor - item.sensor_value);
													}

													prev_item = item;
												}
											}
										}

										return {
											data:		lls_data,
											mask:		mask,
											mask_bit:	mask_bit
										}
									}
								}
							}
						}
					}
				}
			}
		}
	},

	removeHistory: function(record) {
		//console.log('remove history ' + record.get('text'));

		if (typeof record.map_data != 'undefined') {			
			delete record.map_data;
		}

		if (typeof record.history_data != 'undefined') {
			delete record.history_data;
		}

		record.set('lat', 0);
		record.set('lng', 0);

		var loadedDevices = MyApp.loadedDevices;

		var index;

		while ((index = loadedDevices.indexOf(record)) != -1) {
			loadedDevices.splice(index, 1);
		}
	},

	removeAllHistories: function() {
		var loadedDevices = MyApp.loadedDevices;

		while (loadedDevices.length !== 0) {

			this.removeHistory(loadedDevices[0]);
		}
	},

	onChartClick: function(component, click_time) {
		var record = MyApp.selectedRecord;

		if ((typeof record == 'object')&&(typeof record.terminal == 'object')) {

			var time = record.terminal.arr_time;

			for (var i = time.length; i--;) {

				if ((time[i] <= click_time)&&(record.terminal.arr_bits1[i] & 0x20)) {

					for (var j = record.terminal.track_points_count; j--;) {

						if (record.terminal.track_index[j] == i) {

							var lat = record.terminal.arr_lat[i];
							var lng = record.terminal.arr_lng[i];

							Ext.getCmp('tab').setActiveTab(0);

							MyApp.map.setView([lat, lng], 17);

							L.popup().setLatLng([lat, lng]).setContent(record.terminal.getPointTooltip(j)).openOn(MyApp.map);	
							i = 0;
							break;
						}
					}
				}
			}		
		}
	},

	updateTree: function() {
		if (MyApp.reload) {

			MyApp.getApplication().loadTree(false,
			function(tree) {
				MyApp.tree = tree;
				Ext.getCmp('tree').setRootNode(tree);

				Ext.getCmp('tree').getRootNode().cascadeBy( 

				function(n) {

					if (n.raw.type >= 1000) {

						var terminal = new Terminal(n.raw);

						terminal.current_period_loaded = false;

						n.terminal = terminal;
					}
				}
				);		
			}
			);
		}

	},

	HandleNewHistory: function(record) {
		var activeTabId = this.down('tabpanel').getActiveTab().itemId;

		if (record == MyApp.activeDevice) {

			if (activeTabId == 'journal_tab') {
				this.createJournal(record);
			}
			else
			if (activeTabId == 'table_tab') {
				this.createTable(record);	
			}
			else
			if (activeTabId == 'charts_tab') {
				this.createCharts(record);	
			}
			else
			if (activeTabId == 'info_tab') {
				this.createInfo(record);	
			}
			else
			if (activeTabId == 'map_tab') {
				this.updateFuelChart(record);
				this.updateProperties(record);
			}
		}

	},

	reportFuel: function(report) {
		var t_from		= report.t_from;
		var t_to		= report.t_to;
		var responses	= report.responses;
		var responses_length = responses.length;

		function beauty_time(t) {

			var date = new Date(t * 1000);

			var d = date.getDate();
			var M = date.getMonth() + 1;
			var y = date.getYear() + 1900;
			var h = date.getHours();
			var m = date.getMinutes();
			var s = date.getSeconds();

			if (d < 10) d = '0' + d;
			if (M < 10) M = '0' + M;
			if (h < 10) h = '0' + h;
			if (m < 10) m = '0' + m;
			if (s < 10) s = '0' + s;

			return d + '.' + M + '.' + y + ' ' + h + ':' + m + ':' + s;
		}

		var i;

		var html = '';

		var pdf_report = {
			title: "Отчет по расходу топлива",
			rows: [
			"Начало периода: " + beauty_time(t_from),
			"Конец периода: " + beauty_time(t_to)
			],
			sections: [
			]
		};

		for (var r = 0; r < responses_length; r++) {

			var response	= responses[r];
			var record		= response.record;
			var caps		= record.raw.caps;
			var sensors		= record.raw.sensors;

			if ((typeof caps == 'object')&&(typeof sensors == 'object')) {

				var data		= response.data;
				var total_fill	= 0;
				var total_drain	= 0;
				var section		= {};
				var has_lls		= false;
				var consumption	= 0;

				if ((responses_length == 1)&&(typeof data.chart == 'object')) {

					var time = new Uint32Array(data.chart.length);
					var fuel = new Float32Array(data.chart.length);

					for (var j = 0; j < data.chart.length; j++) {
						time[j] = data.chart[j].t;
						fuel[j] = data.chart[j].data;
					}

					var window = Ext.create("MyApp.view.TimeSeriesWindow");

					var chart = Ext.create('Ext.chart.Panel', {

						x_data:		time,
						y_data:		fuel,

						mask_data:	time,
						mask_bit:	0xFFFFFFFF,

						binary:		false
					});

					window.add(chart);
					window.show();
				}

				for (var k = 1; k <= 8; k++) {

					if (((caps['frequency' + k])&&(sensors['frequency' + k + '_type'] == 2))||
					((caps['analog' + k])&&(sensors['analog' + k + '_type'] == 2))||
					((caps['frequency' + k])&&(sensors['frequency' + k + '_type'] == 3))||
					((caps['analog' + k])&&(sensors['analog' + k + '_type'] == 3))||
					((caps.rs485)&&(sensors.rs485_lls_left))||
					((caps.rs485)&&(sensors.rs485_lls_right))) {

						has_lls = true;
					}
				}

				section.title = record.get('text');
				section.objects = [];

				html += "<h1>" + record.get('text') + "</h1>";

				if (caps.injector === true) {

					var injector_text;
					var injecor_consumption;

					if (typeof data.injector == 'undefined') {
						injector_text = 'нет данных';
					}
					else {
						if ((typeof sensors.injector_factor != 'number')||(sensors.injector_factor <= 0)) {
							injector_text = 'коэффициент не настроен, показания: ' + data.injector;
						}
						else {
							injector_consumption = data.injector;

							if (injector_consumption <= 0) {
								injector_consumption = 0;
							}
							else {
								injector_consumption = injector_consumption / sensors.injector_factor;
							}

							injector_text = injector_consumption.toFixed(2).toString() + 'л';

							consumption = injector_consumption;
						}
					}
					section.objects.push( { type: 'row', data: 'Расход по форсунке: ' + injector_text} );
					html += '<p>Расход по форсунке: ' + injector_text + '</p>';
				}
				else {
					if (has_lls === false) {
						section.objects.push( { type: 'row', data: 'Нет данных' } );
						html += '<p>Нет датчиков</p>';
						pdf_report.sections.push(section);
						continue;
					}
				}

				if ((has_lls === true)&&(typeof data.start == 'number')&&(typeof data.end == 'number')) {

					var lls_consumption;

					section.objects.push( { type: 'row', data: 'Уровень топлива в начале периода: ' + data.start.toFixed(2) + 'л' } );
					section.objects.push( { type: 'row', data: 'Уровень топлива в конце периода: ' + data.end.toFixed(2) + 'л' } );

					html += '<p>Уровень топлива в начале периода: ' + data.start.toFixed(2) + 'л</p>';
					html += '<p>Уровень топлива в конце периода: ' + data.end.toFixed(2) + 'л</p>';

					var fills = [];
					var drain = [];

					for (var m = 0; m < data.fills.length; m++) {
						if (data.fills[m].fuel > 0) {
							fills.push(data.fills[m]);
						}
						else {
							drain.push(data.fills[m]);
						}
					}


					if (fills.length) {

						section.objects.push( { type: 'row', data: 'Заправки:' } );

						html += "Заправки:<table border='1'>";

						var table = [];

						table.push([ 'Начало заправки', 'Конец заправки', 'Объем', 'Адрес' ]);

						html += "<tr><td>Начало заправки</td><td>Конец заправки</td><td>Объем</td><td>Адрес</td></tr>";

						for (i = 0; i < fills.length; i++) {

							total_fill += fills[i].fuel;

							table.push([  beauty_time(fills[i].start), beauty_time(fills[i].end), fills[i].fuel.toFixed(2)+ 'л', (fills[i].address) ? fills[i].address : 'Неизвестно' ]);

							html += "<tr><td>" + beauty_time(fills[i].start) + "</td><td>" + beauty_time(fills[i].end) + "</td><td>" + fills[i].fuel.toFixed(2) + "</td><td>";

							var address = (fills[i].address) ? fills[i].address : 'Неизвестно';

							if ((fills[i].lat) && (fills[i].lng)) {
								html += "<a href='#' onclick='Ext.getCmp(\"tab\").setActiveTab(0);MyApp.map.setView([" + (fills[i].lat / 10000000) + "," + (fills[i].lng / 10000000) + "], 17); var popup = L.popup().setLatLng([" + (fills[i].lat / 10000000) + "," + (fills[i].lng / 10000000) + "]).setContent(\""+address+"\").openOn(MyApp.map);	return false'>";
							}

							html += address;

							if ((fills[i].lat) && (fills[i].lng)) {
								html += "</a>";
							}

							html += "</td></tr>";
						}

						html += "</table><br>";

						section.objects.push( { type: 'table', data: table } );
					}

					if (drain.length) {

						section.objects.push( { type: 'row', data: 'Сливы:' } );

						html += "Сливы:<table border='1'>";

						var table = [];

						table.push([ 'Начало слива', 'Конец слива', 'Объем', 'Адрес' ]);

						html += "<tr><td>Начало слива</td><td>Конец слива</td><td>Объем</td><td>Адрес</td></tr>";

						for (i = 0; i < drain.length; i++) {

							total_drain += drain[i].fuel;

							table.push([  beauty_time(drain[i].start), beauty_time(drain[i].end), drain[i].fuel.toFixed(2)+ 'л', (drain[i].address) ? drain[i].address : 'Неизвестно' ]);

							html += "<tr><td>" + beauty_time(drain[i].start) + "</td><td>" + beauty_time(drain[i].end) + "</td><td>" + drain[i].fuel.toFixed(2) + "</td><td>";

							var address = (drain[i].address) ? drain[i].address : 'Неизвестно';

							if ((drain[i].lat) && (drain[i].lng)) {
								html += "<a href='#' onclick='Ext.getCmp(\"tab\").setActiveTab(0);MyApp.map.setView([" + (drain[i].lat / 10000000) + "," + (drain[i].lng / 10000000) + "], 17); var popup = L.popup().setLatLng([" + (drain[i].lat / 10000000) + "," + (drain[i].lng / 10000000) + "]).setContent(\""+address+"\").openOn(MyApp.map);	return false'>";
							}

							html += address;

							if ((drain[i].lat) && (drain[i].lng)) {
								html += "</a>";
							}

							html += "</td></tr>";
						}

						html += "</table><br>";

						section.objects.push( { type: 'table', data: table } );
					}

					lls_consumption = total_fill + (data.start - data.end) + total_drain;

					section.objects.push( { type: 'row', data: 'Расход по датчику уровня: ' + lls_consumption.toFixed(2) + 'л' } );
					html += '<p>Расход по датчику уровня: ' + lls_consumption.toFixed(2) + 'л</p>';

					consumption = lls_consumption;
				}

				if (consumption < 0) {
					consumption = 0;
				}

				section.objects.push( { type: 'row', data: 'Пробег: ' + (data.mileage / 1000).toFixed(2) + 'км' } );
				html += '<p>Пробег: ' + (data.mileage / 1000).toFixed(2) + 'км</p>';

				var h = Math.floor(data.moto / 3600);
				var m = Math.floor((data.moto - h * 3600) / 60);
				var s = Math.floor(data.moto - h * 3600 - m * 60);

				if (h <= 9) {
					h = '0' + h;
				}
				if (m <= 9) {
					m = '0' + m;
				}
				if (s <= 9) {
					s = '0' + s;
				}

				section.objects.push( { type: 'row', data: 'Моточасы: ' + h + ":" + m + ":" + s } );

				html += "<p>Моточасы: " + h + ":" + m + ":" + s + "</p>";

				if (data.mileage !== 0) {
					section.objects.push( { type: 'row', data: 'Расход на 100 км: ' + ((consumption / (data.mileage / 1000)) * 100).toFixed(2) + 'л' } );
					html += '<p>Расход на 100 км: ' + ((consumption / (data.mileage / 1000)) * 100).toFixed(2) + 'л</p>';
				}

				pdf_report.sections.push(section);
			}
		}

		var tab = this.down('#reports_tab');

		tab.add( Ext.create("Ext.Component", {
			autoScroll: true,
			margin: 10,
			border: false,
			html: html
		}));

		MyApp.pdf_report = pdf_report;
		Ext.getCmp('pdf_button_vert').show();
		Ext.getCmp('pdf_button_horz').show();
	},

	reportParksWithEngine: function(report) {
		var t_from				= report.t_from;
		var t_to				= report.t_to;
		var responses			= report.responses;
		var responses_length	= responses.length;
		var html				= '';
		var i, h, m, s;

		function beauty_time(t) {

			var date = new Date(t * 1000);

			var d = date.getDate();
			var M = date.getMonth() + 1;
			var y = date.getYear() + 1900;
			var h = date.getHours();
			var m = date.getMinutes();
			var s = date.getSeconds();

			if (d < 10) d = '0' + d;
			if (M < 10) M = '0' + M;
			if (h < 10) h = '0' + h;
			if (m < 10) m = '0' + m;
			if (s < 10) s = '0' + s;

			return d + '.' + M + '.' + y + ' ' + h + ':' + m + ':' + s;
		}

		var pdf_report = {
			title: "Отчет Стоянки с заведенным двигателем",
			rows: [
			"Начало периода: " + beauty_time(t_from),
			"Конец периода: " + beauty_time(t_to)
			],
			sections: []
		};

		for (var r = 0; r < responses_length; r++) {

			var response	= responses[r];
			var record		= response.record;
			var data		= response.data;
			var data_length	= data.length;
			var total		= 0;
			var num			= 1;

			var section		= {
				title: record.get('text'),
				objects: [ 
				{
					type: 'table',
					data: []
				}]
			};

			var table = section.objects[0].data;

			table.push([ 'Начало стоянки', 'Окончание стоянки', 'Длительность', 'Адрес прибытия' ]);

			html += "<h1>" + record.get('text') + "</h1>";

			html += "<table border='1'>";

			html += "<tr><td>N</td><td>Начало стоянки</td><td>Окончание стоянки<td>Длительность</td><td>Адрес прибытия</td></tr>";

			for (i = 0; i < data_length; i++) {

				var item = data[i];

				var diff = item.to - item.from;

				h = Math.floor(diff / 3600);
				m = Math.floor((diff - h * 3600) / 60);
				s = Math.floor(diff - h * 3600 - m * 60);

				if (h <= 9) {
					h = '0' + h;
				}
				if (m <= 9) {
					m = '0' + m;
				}
				if (s <= 9) {
					s = '0' + s;
				}

				html += "<tr><td>"+num+"</td><td>" + beauty_time(item.from) + "</td><td>" + beauty_time(item.to) + 
				"</td><td>" + h + ":" + m + ":" + s + "</td><td>";

				var address = ((item.address)&&(item.address.near_address != 'not found')) ? (item.address.near_address.address.city + ' ' + item.address.near_address.address.street + ' ' + item.address.near_address.address.build) : 'Неизвестно';

				if ((item.lat) && (item.lng)) {
					html += "<a href='#' onclick='Ext.getCmp(\"tab\").setActiveTab(0);MyApp.map.setView([" + (item.lat / 10000000) + "," + (item.lng / 10000000) + "], 17); var popup = L.popup().setLatLng([" + (item.lat / 10000000) + "," + (item.lng / 10000000) + "]).setContent(\""+address+"\").openOn(MyApp.map);	return false'>";
				}

				html += address;

				if ((item.lat) && (item.lng)) {
					html += "</a>";
				}

				html += "</td></tr>";

				num++;
				total += diff;

				table.push( [beauty_time(item.from), beauty_time(item.to), h + ":" + m + ":" + s, address] );
			}


			html += "</table><br>";

			h = Math.floor(total / 3600);
			m = Math.floor((total - h * 3600) / 60);
			s = Math.floor(total - h * 3600 - m * 60);

			if (h <= 9) {
				h = '0' + h;
			}
			if (m <= 9) {
				m = '0' + m;
			}
			if (s <= 9) {
				s = '0' + s;
			}

			html += "Итого простой с заведенныи двигателем: " + h + ":" + m + ":" + s + "<br><br>";

			section.objects.push( {
				type: 'row',
				data: "Итого простой с заведенныи двигателем: " + h + ":" + m + ":" + s
			});

			pdf_report.sections.push(section);
		}

		var tab = this.down('#reports_tab');

		tab.add( Ext.create("Ext.Component", {
			autoScroll: true,
			margin: 10,
			border: false,
			html: html
		}));

		MyApp.pdf_report = pdf_report;
		Ext.getCmp('pdf_button_vert').show();
		Ext.getCmp('pdf_button_horz').show();
	},

	reportFuelTable: function(report) {
		var t_from				= report.t_from;
		var t_to				= report.t_to;
		var responses			= report.responses;
		var responses_length	= responses.length;

		function beauty_time(t) {

			var date = new Date(t * 1000);

			var d = date.getDate();
			var M = date.getMonth() + 1;
			var y = date.getYear() + 1900;
			var h = date.getHours();
			var m = date.getMinutes();
			var s = date.getSeconds();

			if (d < 10) d = '0' + d;
			if (M < 10) M = '0' + M;
			if (h < 10) h = '0' + h;
			if (m < 10) m = '0' + m;
			if (s < 10) s = '0' + s;

			return d + '.' + M + '.' + y + ' ' + h + ':' + m + ':' + s;
		}

		var pdf_report = {
			title: "Отчет по расходу топлива, сводный",
			rows: [
			"Начало периода: " + beauty_time(t_from),
			"Конец периода: " + beauty_time(t_to)
			],
			table: [
			["Терминал", "Пробег", "Заправка", "Слив", "Расход", "Расход на 100км", "Моточасы"]
			]
		};

		var html = '<table border="1" cellpadding="3"><tr><td>Название</td><td>Пробег</td><td>Заправка</td><td>Слив</td><td>Расход</td><td>Расход на 100км</td><td>Моточасы</td></tr>';

		for (var r = 0; r < responses_length; r++) {

			var response	= responses[r];
			var record		= response.record;
			var data		= response.data;

			var caps		= record.raw.caps;
			var sensors		= record.raw.sensors;

			var consumption = 0;

			if ((typeof caps == 'object')&&(typeof sensors == 'object')) {

				var has_lls = false;

				if (typeof data.moto == 'undefined') {
					data.moto = 0;
				}

				if (typeof data.mileage == 'undefined') {
					data.mileage = 0;
				}

				var h = Math.floor(data.moto / 3600);
				var m = Math.floor((data.moto - h * 3600) / 60);
				var s = Math.floor(data.moto - h * 3600 - m * 60);

				if (h <= 9) {
					h = '0' + h;
				}
				if (m <= 9) {
					m = '0' + m;
				}
				if (s <= 9) {
					s = '0' + s;
				}

				html += "<tr><td>" + record.get('text') + "</td>";

				html += '<td>' + (data.mileage / 1000).toFixed(2) + 'км</td>';

				for (var k = 1; k <= 8; k++) {

					if (((caps['frequency' + k])&&(sensors['frequency' + k + '_type'] == 2))||
					((caps['analog' + k])&&(sensors['analog' + k + '_type'] == 2))||
					((caps['frequency' + k])&&(sensors['frequency' + k + '_type'] == 3))||
					((caps['analog' + k])&&(sensors['analog' + k + '_type'] == 3))||					((caps.rs485)&&(sensors.rs485_lls_left))||
					((caps.rs485)&&(sensors.rs485_lls_right))) {

						has_lls = true;
					}
				}

				if (caps.injector === true) {

					if ((data.injector > 0)&&(sensors.injector_factor > 0)) {
						consumption = data.injector / sensors.injector_factor;
					}
				}
				else {
					if (has_lls === false) {

						html += '<td>-</td><td>-</td><td>-</td><td>-</td><td>' + h + ":" + m + ":" + s + '</td></tr>';

						pdf_report.table.push([ record.get('text'), (data.mileage / 1000).toFixed(2).toString() + 'км', '', '', '', '', h + ":" + m + ":" + s]);

						continue;
					}
				}


				var total_fill	= 0;
				var total_drain = 0;

				if ((has_lls === true)&&(typeof data.fills == 'object')) {

					if (data.fills.length) {

						for (i = 0; i < data.fills.length; i++) {

							if (data.fills[i].fuel > 0) {
								total_fill += data.fills[i].fuel;
							}
							else {
								total_drain += data.fills[i].fuel;
							}
						}
					}

					consumption = (total_fill + (data.start - data.end) + total_drain);
				}

				if (consumption < 0) {
					consumption = 0;
				}

				var consume100 = (data.mileage > 0) ? ((consumption / (data.mileage / 1000)) * 100) : 0;

				html += '<td>' + total_fill.toFixed(2) + 'л</td>';
				html += '<td>' + total_drain.toFixed(2) + 'л</td>';
				html += '<td>' + consumption.toFixed(2) + 'л</td>';
				html += '<td>' + consume100.toFixed(2) + 'л</td>';

				html += '<td>' + h + ":" + m + ":" + s + '</td>';

				html += '</tr>';

				pdf_report.table.push([
				record.get('text'),
				(data.mileage / 1000).toFixed(2).toString()+'км',
				total_fill.toFixed(2).toString() + 'л',
				total_drain.toFixed(2).toString()+ 'л',
				consumption.toFixed(2).toString()+ 'л',
				consume100.toFixed(2).toString()+ 'л',
				h + ":" + m + ":" + s
				]);
			}
		}

		html += '</table>';

		var tab = this.down('#reports_tab');

		tab.add( Ext.create("Ext.Component", {
			autoScroll: true,
			margin: 10,
			border: false,
			html: html
		}));

		MyApp.pdf_report = pdf_report;
		Ext.getCmp('pdf_button_vert').show();
		Ext.getCmp('pdf_button_horz').show();
	},

	reportActivity: function(report) {
		var t_from		= report.t_from;
		var t_to		= report.t_to;
		var responses	= report.responses;
		var responses_length = responses.length;

		function beauty_time(t) {

			var date = new Date(t * 1000);

			var d = date.getDate();
			var M = date.getMonth() + 1;
			var y = date.getYear() + 1900;
			var h = date.getHours();
			var m = date.getMinutes();
			var s = date.getSeconds();

			if (d < 10) d = '0' + d;
			if (M < 10) M = '0' + M;
			if (h < 10) h = '0' + h;
			if (m < 10) m = '0' + m;
			if (s < 10) s = '0' + s;

			return d + '.' + M + '.' + y + ' ' + h + ':' + m + ':' + s;
		}

		var i;

		var b0 = 0;
		var b100 = 0;
		var b1000 = 0;

		var html = '<table border="1">';

		var pdf_report = {
			title: "Отчет по активности",
			rows: [
			"Начало периода: " + beauty_time(t_from),
			"Конец периода: " + beauty_time(t_to)
			],
			sections: [
			]
		};

		for (var r = 0; r < responses_length; r++) {

			var response	= responses[r];
			var record		= response.record;

			html += "<tr><td>" + record.getPath('text') + "</td><td>" + record.raw.dev_id + "</td><td>" + response.data + "</td></tr>";

			if (response.data > 0) b0++;
			if (response.data > 100) b100++;
			if (response.data > 1000) b1000++;

		}

		html += "</table>";

		html += 'Больше ноля: ' + b0 + '<br>';
		html += 'Больше ста: ' + b100 + '<br>';
		html += 'Больше тысячи: ' + b1000 + '<br>';

		var tab = this.down('#reports_tab');

		tab.add( Ext.create("Ext.Component", {
			autoScroll: true,
			margin: 10,
			border: false,
			html: html
		}));

		MyApp.pdf_report = pdf_report;
		Ext.getCmp('pdf_button_vert').hide();
		Ext.getCmp('pdf_button_horz').hide();
	}

});