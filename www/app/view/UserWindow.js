/*
 * File: app/view/UserWindow.js
 *
 * This file was generated by Sencha Architect version 2.2.3.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.UserWindow', {
	extend: 'Ext.window.Window',

	id: 'userCreate',
	layout: {
		type: 'fit'
	},
	title: 'Добавление пользователя',

	initComponent: function() {
		var me = this;

		Ext.applyIf(me, {
			items: [
				{
					xtype: 'form',
					border: false,
					id: 'formPanel',
					bodyPadding: 10,
					header: false,
					title: 'My Form',
					jsonSubmit: true,
					trackResetOnLoad: true,
					items: [
						{
							xtype: 'fieldset',
							title: 'Учетные данные:',
							items: [
								{
									xtype: 'textfield',
									anchor: '100%',
									id: 'login',
									minWidth: 400,
									fieldLabel: 'Имя пользователя',
									labelWidth: 150,
									name: 'login',
									allowBlank: false,
									allowOnlyWhitespace: false,
									blankText: 'Необходимо указать имя пользователя',
									emptyText: 'Имя пользователя',
									maxLength: 32,
									maxLengthText: 'Имя пользовтеля не должно содержать более {0} символов',
									minLength: 1
								},
								{
									xtype: 'textfield',
									anchor: '100%',
									minWidth: 400,
									fieldLabel: 'Пароль',
									labelWidth: 150,
									name: 'password',
									inputType: 'password',
									allowBlank: false,
									allowOnlyWhitespace: false,
									blankText: 'Необходимо указать пароль',
									emptyText: 'Пароль',
									maxLength: 32,
									maxLengthText: 'Пароль не должен содержать более {0} символов',
									minLength: 1
								},
								{
									xtype: 'textfield',
									validator: function(value) {
										var formPanel = Ext.getCmp("userCreate").down('form').getForm();

										var pass1 = formPanel.findField("password").getValue();
										var pass2 = formPanel.findField("confirm").getValue();

										if (pass1 == pass2)
										return true;

										return "Подтверждение пароля не совпадает";

									},
									anchor: '100%',
									id: 'confirm',
									minWidth: 400,
									fieldLabel: 'Подтверждение',
									labelWidth: 150,
									submitValue: false,
									inputType: 'password',
									allowBlank: false,
									allowOnlyWhitespace: false,
									blankText: 'Неоюходимо подтвердить пароль',
									emptyText: 'Подтверждение',
									maxLength: 32,
									maxLengthText: 'Подтверждение не должно содержать более {0} символов',
									minLength: 1
								}
							]
						},
						{
							xtype: 'fieldset',
							title: 'Контактные данные:',
							items: [
								{
									xtype: 'textfield',
									anchor: '100%',
									minWidth: 400,
									fieldLabel: 'Организация',
									labelWidth: 150,
									name: 'company',
									maxLength: 256,
									maxLengthText: 'Название организации не должно содержать более {0} символов'
								},
								{
									xtype: 'textfield',
									anchor: '100%',
									minWidth: 400,
									fieldLabel: 'ФИО',
									labelWidth: 150,
									name: 'name',
									maxLength: 256,
									maxLengthText: 'Контактное лицо не должно содержать более {0} символов'
								},
								{
									xtype: 'textfield',
									anchor: '100%',
									minWidth: 400,
									fieldLabel: 'Телефон',
									labelWidth: 150,
									name: 'phone',
									maxLength: 33,
									maxLengthText: 'Телефон не должен содержать более {0} символов'
								},
								{
									xtype: 'textfield',
									anchor: '100%',
									minWidth: 400,
									fieldLabel: 'Email',
									labelWidth: 150,
									name: 'email',
									invalidText: 'Некорректное значение',
									maxLength: 256,
									maxLengthText: 'Email не должен содержать более {0} символов',
									vtype: 'email'
								}
							]
						},
						{
							xtype: 'fieldset',
							layout: {
								align: 'stretch',
								type: 'hbox'
							},
							title: 'Права доступа:',
							items: [
								{
									xtype: 'container',
									items: [
										{
											xtype: 'checkboxfield',
											fieldLabel: '',
											name: 'permission_login',
											boxLabel: 'Вход в систему',
											checked: true
										}
									]
								},
								{
									xtype: 'container',
									margins: '0, 0, 0, 10',
									items: [
										{
											xtype: 'checkboxfield',
											name: 'permission_admin',
											boxLabel: 'Администрирование',
											checked: true
										}
									]
								}
							]
						}
					],
					dockedItems: [
						{
							xtype: 'container',
							dock: 'bottom',
							layout: {
								align: 'middle',
								pack: 'center',
								type: 'hbox'
							},
							items: [
								{
									xtype: 'button',
									minWidth: 100,
									text: 'Отмена',
									listeners: {
										click: {
											fn: me.onButtonClick1,
											scope: me
										}
									}
								},
								{
									xtype: 'button',
									formBind: true,
									margin: 10,
									minWidth: 100,
									text: 'ОК',
									listeners: {
										click: {
											fn: me.onButtonClick,
											scope: me
										}
									}
								}
							]
						}
					]
				}
			],
			listeners: {
				beforeshow: {
					fn: me.onWindowBeforeShow,
					scope: me
				}
			}
		});

		me.callParent(arguments);
	},

	onButtonClick1: function(button, e, eOpts) {
		button.up('window').close();
	},

	onButtonClick: function(button, e, eOpts) {
		var form = button.up('form').getForm();
		var window = button.up('window');

		if ((form.method != 'PUT')&&(!form.isDirty())) {
			window.close();
			return;
		}

		var confirm = form.findField('confirm');
		confirm.setDisabled(true);

		var password = form.findField('password');

		if (form.method == 'POST') {
			password.setDisabled(!password.isDirty());
		}

		var mask = Ext.getBody().mask('Сохранение данных', 'Сохранение');
		mask.setStyle('z-index', Ext.WindowMgr.zseed + 1000);


		form.submit({									

			clientValidation: true,
			headers : { Authorization : MyApp.AuthString },

			success: function(form, action) {

				Ext.getBody().unmask();

				MyApp.reload = true;

				window.close();
			},

			failure: function(form, action) {

				Ext.getBody().unmask();

				password.setDisabled(false);
				confirm.setDisabled(false);

				switch (action.failureType) {

					case Ext.form.action.Action.CLIENT_INVALID:
					Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
					break;

					case Ext.form.action.Action.CONNECT_FAILURE:
					Ext.Msg.alert('Failure', 'Ajax communication failed');
					break;

					case Ext.form.action.Action.SERVER_INVALID:
					Ext.Msg.alert('Failure', action.result.message);
					break;
				}
			}
		});

	},

	onWindowBeforeShow: function(component, eOpts) {
		var window = component;
		var form = window.down('form').getForm();

		if (typeof window.user_id != 'undefined') {

			form.method = 'POST';
			form.url = '/objects/' + window.user_id;
			window.setTitle('Изменение настроек пользователя');

			var mask = Ext.getBody().mask('Получение данных', 'Загрузка');
			mask.setStyle('z-index', Ext.WindowMgr.zseed + 1000);

			Ext.Ajax.request({
				url: form.url,
				scope: this,
				headers : { Authorization : MyApp.AuthString },

				success: function(response, options){

					Ext.getBody().unmask();

					data = Ext.decode(response.responseText).object;
					data.password = 'fuckusa';
					data.confirm = 'fuckusa';
					form.setValues(data);
					form.setValues(form.getValues);
				},

				failure: function(response, options){

					Ext.getBody().unmask();

					var statusCode = response.status;
					var statusText = response.statusText;

					Ext.MessageBox.show({
						title: 'Ошибка',
						msg: statusText + '[' + statusCode + ']',
						buttons: Ext.MessageBox.OK,
						icon: Ext.MessageBox.ERROR
					});

					window.close();
				},

				timeout: 60000
			});				
		}
		else {	
			form.method = 'PUT';
			form.url = '/objects/' + window.parent_id + '/users';
			window.setTitle('Добавление пользователя');
		}									


	}

});