/*
 * File: app/view/ChannelsWindow.js
 *
 * This file was generated by Sencha Architect version 2.2.3.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.ChannelsWindow', {
	extend: 'Ext.window.Window',

	height: 484,
	width: 439,
	layout: {
		type: 'fit'
	},
	title: 'Настройка вида и порядка',
	modal: true,

	initComponent: function() {
		var me = this;

		Ext.applyIf(me, {
			items: [
				{
					xtype: 'gridpanel',
					overflowY: 'auto',
					header: false,
					title: 'My Grid Panel',
					enableColumnHide: false,
					enableColumnMove: false,
					store: 'ChannelsMemoryStore',
					columns: [
						{
							xtype: 'checkcolumn',
							draggable: false,
							width: 28,
							resizable: false,
							defaultWidth: 1,
							sortable: false,
							dataIndex: 'visible',
							hideable: false,
							text: ''
						},
						{
							xtype: 'gridcolumn',
							draggable: false,
							enableColumnHide: false,
							sortable: false,
							dataIndex: 'text',
							hideable: false,
							text: 'Название',
							flex: 1
						},
						{
							xtype: 'actioncolumn',
							resizable: false,
							stopSelection: false,
							items: [
								{
									handler: function(view, rowIndex, colIndex, item, e, record, row) {
										if (rowIndex < 1) {
											return;
										}

										view.getStore().remove(record);
										view.getStore().insert(rowIndex - 1, [record]);
									},
									icon: 'images/up.gif',
									iconCls: '',
									tooltip: 'Переместить вверх'
								},
								{
									altText: '->'
								},
								{
									handler: function(view, rowIndex, colIndex, item, e, record, row) {
										if (rowIndex >= view.all.endIndex)
										return;

										view.getStore().remove(record);
										view.getStore().insert(rowIndex + 1, [record]);
									},
									icon: 'images/down.gif',
									tooltip: 'Переместить вниз'
								}
							]
						}
					]
				}
			],
			dockedItems: [
				{
					xtype: 'toolbar',
					dock: 'bottom',
					items: [
						{
							xtype: 'tbfill'
						},
						{
							xtype: 'button',
							minWidth: 80,
							text: 'ОК',
							listeners: {
								click: {
									fn: me.onButtonClick,
									scope: me
								}
							}
						}
					]
				}
			],
			listeners: {
				close: {
					fn: me.onWindowClose,
					scope: me
				}
			}
		});

		me.callParent(arguments);
	},

	onButtonClick: function(button, e, eOpts) {
		button.up('window').close();
	},

	onWindowClose: function(panel, eOpts) {
		var memory	= Ext.data.StoreManager.lookup('ChannelsMemoryStore');

		var channels = [];

		memory.each( 
		function(record) {
			channels.push({a: record.get('name'), b: record.get('visible')});
		},
		this
		);

		MyApp.localStorage.setItem('channels', Ext.encode(channels));
	}

});